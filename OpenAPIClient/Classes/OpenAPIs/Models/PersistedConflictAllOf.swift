//
// PersistedConflictAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PersistedConflictAllOf: Codable, JSONEncodable, Hashable {

    public var primaryEvent: EventBase
    public var conflictingEvent: EventBase
    public var person: Person
    public var reason: ConflictReasonEnum
    /**  */
    public var active: Bool
    /**  */
    public var waivedByUserId: UUID?
    /**  */
    public var id: UUID
    /**  */
    public var lastModifiedDate: Date

    public init(primaryEvent: EventBase, conflictingEvent: EventBase, person: Person, reason: ConflictReasonEnum, active: Bool, waivedByUserId: UUID? = nil, id: UUID, lastModifiedDate: Date) {
        self.primaryEvent = primaryEvent
        self.conflictingEvent = conflictingEvent
        self.person = person
        self.reason = reason
        self.active = active
        self.waivedByUserId = waivedByUserId
        self.id = id
        self.lastModifiedDate = lastModifiedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case primaryEvent
        case conflictingEvent
        case person
        case reason
        case active
        case waivedByUserId
        case id
        case lastModifiedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(primaryEvent, forKey: .primaryEvent)
        try container.encode(conflictingEvent, forKey: .conflictingEvent)
        try container.encode(person, forKey: .person)
        try container.encode(reason, forKey: .reason)
        try container.encode(active, forKey: .active)
        try container.encodeIfPresent(waivedByUserId, forKey: .waivedByUserId)
        try container.encode(id, forKey: .id)
        try container.encode(lastModifiedDate, forKey: .lastModifiedDate)
    }
}

