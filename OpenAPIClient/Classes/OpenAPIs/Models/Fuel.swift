//
// Fuel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct Fuel: Codable, JSONEncodable, Hashable {

    /**  */
    public var airRefuel: Double?
    /**  */
    public var land: Double?
    /**  */
    public var ramp: Double?
    /**  */
    public var didFuelExceedRequirement: Bool? = false
    /**  */
    public var didLimitFuelUse: Bool? = false
    /**  */
    public var didMissionChange: Bool? = false
    /**  */
    public var didOptimize: Bool? = false
    /**  */
    public var didReducedEngineTaxiIn: Bool? = false
    /**  */
    public var didTankerFuel: Bool? = false

    public init(airRefuel: Double? = nil, land: Double? = nil, ramp: Double? = nil, didFuelExceedRequirement: Bool? = false, didLimitFuelUse: Bool? = false, didMissionChange: Bool? = false, didOptimize: Bool? = false, didReducedEngineTaxiIn: Bool? = false, didTankerFuel: Bool? = false) {
        self.airRefuel = airRefuel
        self.land = land
        self.ramp = ramp
        self.didFuelExceedRequirement = didFuelExceedRequirement
        self.didLimitFuelUse = didLimitFuelUse
        self.didMissionChange = didMissionChange
        self.didOptimize = didOptimize
        self.didReducedEngineTaxiIn = didReducedEngineTaxiIn
        self.didTankerFuel = didTankerFuel
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case airRefuel
        case land
        case ramp
        case didFuelExceedRequirement
        case didLimitFuelUse
        case didMissionChange
        case didOptimize
        case didReducedEngineTaxiIn
        case didTankerFuel
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(airRefuel, forKey: .airRefuel)
        try container.encodeIfPresent(land, forKey: .land)
        try container.encodeIfPresent(ramp, forKey: .ramp)
        try container.encodeIfPresent(didFuelExceedRequirement, forKey: .didFuelExceedRequirement)
        try container.encodeIfPresent(didLimitFuelUse, forKey: .didLimitFuelUse)
        try container.encodeIfPresent(didMissionChange, forKey: .didMissionChange)
        try container.encodeIfPresent(didOptimize, forKey: .didOptimize)
        try container.encodeIfPresent(didReducedEngineTaxiIn, forKey: .didReducedEngineTaxiIn)
        try container.encodeIfPresent(didTankerFuel, forKey: .didTankerFuel)
    }
}

