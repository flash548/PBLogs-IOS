//
// Form457.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct Form457: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var actionsTaken: String?
    public var controlNumber: String?
    public var dateClosed: Date?
    public var dateForward: Date?
    public var dateInvestigated: Date?
    public var dateSubmitted: Date?
    public var description: String?
    public var designatedOpr: String?
    public var fromContactInfo: String?
    public var installationSafetyOffice: String?
    public var investigator: String?
    public var investigatorRecommendations: String?
    public var isValidHazard: Bool?
    public var oprDate: Date?
    public var oprName: String?
    public var recommendation: String?
    public var reviewerName: String?
    public var riskAssessmentCode: String?
    public var summary: String?
    public var suspenseDate: Date?
    public var type: String?

    public init(id: UUID? = nil, actionsTaken: String? = nil, controlNumber: String? = nil, dateClosed: Date? = nil, dateForward: Date? = nil, dateInvestigated: Date? = nil, dateSubmitted: Date? = nil, description: String? = nil, designatedOpr: String? = nil, fromContactInfo: String? = nil, installationSafetyOffice: String? = nil, investigator: String? = nil, investigatorRecommendations: String? = nil, isValidHazard: Bool? = nil, oprDate: Date? = nil, oprName: String? = nil, recommendation: String? = nil, reviewerName: String? = nil, riskAssessmentCode: String? = nil, summary: String? = nil, suspenseDate: Date? = nil, type: String? = nil) {
        self.id = id
        self.actionsTaken = actionsTaken
        self.controlNumber = controlNumber
        self.dateClosed = dateClosed
        self.dateForward = dateForward
        self.dateInvestigated = dateInvestigated
        self.dateSubmitted = dateSubmitted
        self.description = description
        self.designatedOpr = designatedOpr
        self.fromContactInfo = fromContactInfo
        self.installationSafetyOffice = installationSafetyOffice
        self.investigator = investigator
        self.investigatorRecommendations = investigatorRecommendations
        self.isValidHazard = isValidHazard
        self.oprDate = oprDate
        self.oprName = oprName
        self.recommendation = recommendation
        self.reviewerName = reviewerName
        self.riskAssessmentCode = riskAssessmentCode
        self.summary = summary
        self.suspenseDate = suspenseDate
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case actionsTaken
        case controlNumber
        case dateClosed
        case dateForward
        case dateInvestigated
        case dateSubmitted
        case description
        case designatedOpr
        case fromContactInfo
        case installationSafetyOffice
        case investigator
        case investigatorRecommendations
        case isValidHazard
        case oprDate
        case oprName
        case recommendation
        case reviewerName
        case riskAssessmentCode
        case summary
        case suspenseDate
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(actionsTaken, forKey: .actionsTaken)
        try container.encodeIfPresent(controlNumber, forKey: .controlNumber)
        try container.encodeIfPresent(dateClosed, forKey: .dateClosed)
        try container.encodeIfPresent(dateForward, forKey: .dateForward)
        try container.encodeIfPresent(dateInvestigated, forKey: .dateInvestigated)
        try container.encodeIfPresent(dateSubmitted, forKey: .dateSubmitted)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(designatedOpr, forKey: .designatedOpr)
        try container.encodeIfPresent(fromContactInfo, forKey: .fromContactInfo)
        try container.encodeIfPresent(installationSafetyOffice, forKey: .installationSafetyOffice)
        try container.encodeIfPresent(investigator, forKey: .investigator)
        try container.encodeIfPresent(investigatorRecommendations, forKey: .investigatorRecommendations)
        try container.encodeIfPresent(isValidHazard, forKey: .isValidHazard)
        try container.encodeIfPresent(oprDate, forKey: .oprDate)
        try container.encodeIfPresent(oprName, forKey: .oprName)
        try container.encodeIfPresent(recommendation, forKey: .recommendation)
        try container.encodeIfPresent(reviewerName, forKey: .reviewerName)
        try container.encodeIfPresent(riskAssessmentCode, forKey: .riskAssessmentCode)
        try container.encodeIfPresent(summary, forKey: .summary)
        try container.encodeIfPresent(suspenseDate, forKey: .suspenseDate)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

