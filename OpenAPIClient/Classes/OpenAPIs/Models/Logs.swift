//
// Logs.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An analytics object */
public struct Logs: Codable, JSONEncodable, Hashable {

    /** Time logs were retreived */
    public var time: Date
    /** Logs search start time */
    public var startTime: Date?
    /** Logs search end time */
    public var endTime: Date?
    /** Total pages available in query data */
    public var totalPages: Int?
    /** Total entries in query data */
    public var totalElements: Int?
    /** Nmber of the page you are on */
    public var pageNumber: Int?
    /** Size of each page */
    public var pageSize: Int?
    /** Array of Logs represented by `LogResult` objects */
    public var results: [LogResult]

    public init(time: Date, startTime: Date? = nil, endTime: Date? = nil, totalPages: Int? = nil, totalElements: Int? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, results: [LogResult]) {
        self.time = time
        self.startTime = startTime
        self.endTime = endTime
        self.totalPages = totalPages
        self.totalElements = totalElements
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.results = results
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case time
        case startTime = "start_time"
        case endTime = "end_time"
        case totalPages
        case totalElements
        case pageNumber
        case pageSize
        case results
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(time, forKey: .time)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(endTime, forKey: .endTime)
        try container.encodeIfPresent(totalPages, forKey: .totalPages)
        try container.encodeIfPresent(totalElements, forKey: .totalElements)
        try container.encodeIfPresent(pageNumber, forKey: .pageNumber)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encode(results, forKey: .results)
    }
}

