//
// Form853.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct Form853: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var unit: String?
    public var aircraft: String?
    public var tailNumber: String?
    public var date: Date?
    public var dailyPeriod: String?
    public var specialUseAirspace: String?
    public var lowLevelRoute: String?
    public var strikeAwareness: String?
    public var latitude: String?
    public var longitude: String?
    public var effectOnFlight: String?
    public var speed: Double?
    public var altitude: Double?
    public var phaseOfOperation: String?
    public var birdAvoidanceModel: String?
    public var birdWatchConditions: String?
    public var wildlifeStruck: String?
    public var avianHazardAvisorySystem: String?
    public var locationRemarks: String?
    public var costEstimate: String?
    public var actualCost: Double?
    public var damageClass: String?
    public var remainsFound: String?
    public var dateRemainsSent: Date?
    public var additionalRemarks: String?
    public var specialUseAirspaceName: String?
    public var lowLevelRouteOther: String?
    public var airportName: String?
    public var airportIcao: String?
    public var airportHostId: String?
    public var airportRunway: String?
    public var airportOther: String?
    /**  */
    public var impactPoints: [ImpactPointModel]?

    public init(id: UUID? = nil, unit: String? = nil, aircraft: String? = nil, tailNumber: String? = nil, date: Date? = nil, dailyPeriod: String? = nil, specialUseAirspace: String? = nil, lowLevelRoute: String? = nil, strikeAwareness: String? = nil, latitude: String? = nil, longitude: String? = nil, effectOnFlight: String? = nil, speed: Double? = nil, altitude: Double? = nil, phaseOfOperation: String? = nil, birdAvoidanceModel: String? = nil, birdWatchConditions: String? = nil, wildlifeStruck: String? = nil, avianHazardAvisorySystem: String? = nil, locationRemarks: String? = nil, costEstimate: String? = nil, actualCost: Double? = nil, damageClass: String? = nil, remainsFound: String? = nil, dateRemainsSent: Date? = nil, additionalRemarks: String? = nil, specialUseAirspaceName: String? = nil, lowLevelRouteOther: String? = nil, airportName: String? = nil, airportIcao: String? = nil, airportHostId: String? = nil, airportRunway: String? = nil, airportOther: String? = nil, impactPoints: [ImpactPointModel]? = nil) {
        self.id = id
        self.unit = unit
        self.aircraft = aircraft
        self.tailNumber = tailNumber
        self.date = date
        self.dailyPeriod = dailyPeriod
        self.specialUseAirspace = specialUseAirspace
        self.lowLevelRoute = lowLevelRoute
        self.strikeAwareness = strikeAwareness
        self.latitude = latitude
        self.longitude = longitude
        self.effectOnFlight = effectOnFlight
        self.speed = speed
        self.altitude = altitude
        self.phaseOfOperation = phaseOfOperation
        self.birdAvoidanceModel = birdAvoidanceModel
        self.birdWatchConditions = birdWatchConditions
        self.wildlifeStruck = wildlifeStruck
        self.avianHazardAvisorySystem = avianHazardAvisorySystem
        self.locationRemarks = locationRemarks
        self.costEstimate = costEstimate
        self.actualCost = actualCost
        self.damageClass = damageClass
        self.remainsFound = remainsFound
        self.dateRemainsSent = dateRemainsSent
        self.additionalRemarks = additionalRemarks
        self.specialUseAirspaceName = specialUseAirspaceName
        self.lowLevelRouteOther = lowLevelRouteOther
        self.airportName = airportName
        self.airportIcao = airportIcao
        self.airportHostId = airportHostId
        self.airportRunway = airportRunway
        self.airportOther = airportOther
        self.impactPoints = impactPoints
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case unit
        case aircraft
        case tailNumber
        case date
        case dailyPeriod
        case specialUseAirspace
        case lowLevelRoute
        case strikeAwareness
        case latitude
        case longitude
        case effectOnFlight
        case speed
        case altitude
        case phaseOfOperation
        case birdAvoidanceModel
        case birdWatchConditions
        case wildlifeStruck
        case avianHazardAvisorySystem
        case locationRemarks
        case costEstimate
        case actualCost
        case damageClass
        case remainsFound
        case dateRemainsSent
        case additionalRemarks
        case specialUseAirspaceName
        case lowLevelRouteOther
        case airportName
        case airportIcao
        case airportHostId
        case airportRunway
        case airportOther
        case impactPoints
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(unit, forKey: .unit)
        try container.encodeIfPresent(aircraft, forKey: .aircraft)
        try container.encodeIfPresent(tailNumber, forKey: .tailNumber)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(dailyPeriod, forKey: .dailyPeriod)
        try container.encodeIfPresent(specialUseAirspace, forKey: .specialUseAirspace)
        try container.encodeIfPresent(lowLevelRoute, forKey: .lowLevelRoute)
        try container.encodeIfPresent(strikeAwareness, forKey: .strikeAwareness)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(effectOnFlight, forKey: .effectOnFlight)
        try container.encodeIfPresent(speed, forKey: .speed)
        try container.encodeIfPresent(altitude, forKey: .altitude)
        try container.encodeIfPresent(phaseOfOperation, forKey: .phaseOfOperation)
        try container.encodeIfPresent(birdAvoidanceModel, forKey: .birdAvoidanceModel)
        try container.encodeIfPresent(birdWatchConditions, forKey: .birdWatchConditions)
        try container.encodeIfPresent(wildlifeStruck, forKey: .wildlifeStruck)
        try container.encodeIfPresent(avianHazardAvisorySystem, forKey: .avianHazardAvisorySystem)
        try container.encodeIfPresent(locationRemarks, forKey: .locationRemarks)
        try container.encodeIfPresent(costEstimate, forKey: .costEstimate)
        try container.encodeIfPresent(actualCost, forKey: .actualCost)
        try container.encodeIfPresent(damageClass, forKey: .damageClass)
        try container.encodeIfPresent(remainsFound, forKey: .remainsFound)
        try container.encodeIfPresent(dateRemainsSent, forKey: .dateRemainsSent)
        try container.encodeIfPresent(additionalRemarks, forKey: .additionalRemarks)
        try container.encodeIfPresent(specialUseAirspaceName, forKey: .specialUseAirspaceName)
        try container.encodeIfPresent(lowLevelRouteOther, forKey: .lowLevelRouteOther)
        try container.encodeIfPresent(airportName, forKey: .airportName)
        try container.encodeIfPresent(airportIcao, forKey: .airportIcao)
        try container.encodeIfPresent(airportHostId, forKey: .airportHostId)
        try container.encodeIfPresent(airportRunway, forKey: .airportRunway)
        try container.encodeIfPresent(airportOther, forKey: .airportOther)
        try container.encodeIfPresent(impactPoints, forKey: .impactPoints)
    }
}

