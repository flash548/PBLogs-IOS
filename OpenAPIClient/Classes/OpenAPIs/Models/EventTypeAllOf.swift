//
// EventTypeAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EventTypeAllOf: Codable, JSONEncodable, Hashable {

    public enum PostCrewRest: String, Codable, CaseIterable {
        case durationDiv3Max96 = "DURATION_DIV_3_MAX_96"
        case custom = "CUSTOM"
        case _none = "NONE"
    }
    /** Name of this type of event */
    public var name: String
    /** The name of the icon to be used to reperesent this event */
    public var icon: String
    /** Identifier of which `EventType` this is */
    public var id: Int
    /** Tag name to apply to class names */
    public var tag: String
    /** Organization this `EventType` belongs to */
    public var organizationId: UUID
    /** The selected color scheme of the event */
    public var color: String?
    /**  */
    public var active: Bool
    /** Integer to determine what kind of select, each event form should have */
    public var personnelSelectType: Int
    /**  */
    public var eventFields: [EventField]?
    /**  */
    public var preCrewRest: Int?
    /**  */
    public var customPostCrewRest: Int?
    /**  */
    public var postCrewRest: PostCrewRest?
    /** Default event job roles for specific event type */
    public var defaultJobRoles: [DefaultEventJobRole]?
    /** A flag to determine if this is an `EventType` that can be created/updated/deleted by any of the Organization's Members. Examples: Personnel Events - Leave, Desk, Medical, etc. */
    public var creatableByMember: Bool
    /** defines order in which event type appears on the gantt */
    public var index: Double
    /**  */
    public var chatTeamId: Int?
    /** Unique name of Mattermost Chat Team for the purpose of navigating to a channel for that event type */
    public var chatTeamName: String?
    /** Show this type of event on the Big Board */
    public var showOnBigBoard: Bool?

    public init(name: String, icon: String, id: Int, tag: String, organizationId: UUID, color: String? = nil, active: Bool, personnelSelectType: Int, eventFields: [EventField]? = nil, preCrewRest: Int? = nil, customPostCrewRest: Int? = nil, postCrewRest: PostCrewRest? = nil, defaultJobRoles: [DefaultEventJobRole]? = nil, creatableByMember: Bool, index: Double, chatTeamId: Int? = nil, chatTeamName: String? = nil, showOnBigBoard: Bool? = nil) {
        self.name = name
        self.icon = icon
        self.id = id
        self.tag = tag
        self.organizationId = organizationId
        self.color = color
        self.active = active
        self.personnelSelectType = personnelSelectType
        self.eventFields = eventFields
        self.preCrewRest = preCrewRest
        self.customPostCrewRest = customPostCrewRest
        self.postCrewRest = postCrewRest
        self.defaultJobRoles = defaultJobRoles
        self.creatableByMember = creatableByMember
        self.index = index
        self.chatTeamId = chatTeamId
        self.chatTeamName = chatTeamName
        self.showOnBigBoard = showOnBigBoard
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case icon
        case id
        case tag
        case organizationId
        case color
        case active
        case personnelSelectType
        case eventFields
        case preCrewRest
        case customPostCrewRest
        case postCrewRest
        case defaultJobRoles
        case creatableByMember
        case index
        case chatTeamId
        case chatTeamName
        case showOnBigBoard
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(icon, forKey: .icon)
        try container.encode(id, forKey: .id)
        try container.encode(tag, forKey: .tag)
        try container.encode(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(color, forKey: .color)
        try container.encode(active, forKey: .active)
        try container.encode(personnelSelectType, forKey: .personnelSelectType)
        try container.encodeIfPresent(eventFields, forKey: .eventFields)
        try container.encodeIfPresent(preCrewRest, forKey: .preCrewRest)
        try container.encodeIfPresent(customPostCrewRest, forKey: .customPostCrewRest)
        try container.encodeIfPresent(postCrewRest, forKey: .postCrewRest)
        try container.encodeIfPresent(defaultJobRoles, forKey: .defaultJobRoles)
        try container.encode(creatableByMember, forKey: .creatableByMember)
        try container.encode(index, forKey: .index)
        try container.encodeIfPresent(chatTeamId, forKey: .chatTeamId)
        try container.encodeIfPresent(chatTeamName, forKey: .chatTeamName)
        try container.encodeIfPresent(showOnBigBoard, forKey: .showOnBigBoard)
    }
}

