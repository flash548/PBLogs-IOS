//
// ConflictSetting.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** conflict setting object */
public struct ConflictSetting: Codable, JSONEncodable, Hashable {

    /**  */
    public var id: UUID?
    /**  */
    public var eventTypeId1: Int?
    /**  */
    public var eventTypeId2: Int?
    /**  */
    public var organizationId: String?
    public var type: ConflictReasonEnum?
    /** whether or not to ignore a conflict */
    public var ignoreConflict: Bool
    /** id of user who created the entry */
    public var createdBy: UUID?
    /** id of user who last modified the entry */
    public var lastModifiedBy: UUID?
    /** date of entry creation */
    public var createdDate: Date?
    /** date entry was last modified */
    public var lastModifiedDate: Date?

    public init(id: UUID? = nil, eventTypeId1: Int? = nil, eventTypeId2: Int? = nil, organizationId: String? = nil, type: ConflictReasonEnum? = nil, ignoreConflict: Bool, createdBy: UUID? = nil, lastModifiedBy: UUID? = nil, createdDate: Date? = nil, lastModifiedDate: Date? = nil) {
        self.id = id
        self.eventTypeId1 = eventTypeId1
        self.eventTypeId2 = eventTypeId2
        self.organizationId = organizationId
        self.type = type
        self.ignoreConflict = ignoreConflict
        self.createdBy = createdBy
        self.lastModifiedBy = lastModifiedBy
        self.createdDate = createdDate
        self.lastModifiedDate = lastModifiedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case eventTypeId1
        case eventTypeId2
        case organizationId
        case type
        case ignoreConflict
        case createdBy
        case lastModifiedBy
        case createdDate
        case lastModifiedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(eventTypeId1, forKey: .eventTypeId1)
        try container.encodeIfPresent(eventTypeId2, forKey: .eventTypeId2)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encode(ignoreConflict, forKey: .ignoreConflict)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(lastModifiedBy, forKey: .lastModifiedBy)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(lastModifiedDate, forKey: .lastModifiedDate)
    }
}

