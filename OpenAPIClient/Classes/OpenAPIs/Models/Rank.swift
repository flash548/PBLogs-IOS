//
// Rank.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A person&#39;s rank in the military */
public struct Rank: Codable, JSONEncodable, Hashable {

    /** The name of this rank */
    public var rankName: String
    /** The pay scale for this rank. */
    public var payGrade: String
    /** The abbreviation of the rank name. */
    public var rankAbbr: String
    /** Delineates if a rank is Enlisted, Warrant Officer, or Officer. */
    public var rankStatus: String
    /**  */
    public var rankId: Int
    /** id of user who created the entry */
    public var createdBy: UUID?
    /** id of user who last modified the entry */
    public var lastModifiedBy: UUID?
    /** date of entry creation */
    public var createdDate: Date?
    /** date entry was last modified */
    public var lastModifiedDate: Date?

    public init(rankName: String, payGrade: String, rankAbbr: String, rankStatus: String, rankId: Int, createdBy: UUID? = nil, lastModifiedBy: UUID? = nil, createdDate: Date? = nil, lastModifiedDate: Date? = nil) {
        self.rankName = rankName
        self.payGrade = payGrade
        self.rankAbbr = rankAbbr
        self.rankStatus = rankStatus
        self.rankId = rankId
        self.createdBy = createdBy
        self.lastModifiedBy = lastModifiedBy
        self.createdDate = createdDate
        self.lastModifiedDate = lastModifiedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case rankName
        case payGrade
        case rankAbbr
        case rankStatus
        case rankId
        case createdBy
        case lastModifiedBy
        case createdDate
        case lastModifiedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(rankName, forKey: .rankName)
        try container.encode(payGrade, forKey: .payGrade)
        try container.encode(rankAbbr, forKey: .rankAbbr)
        try container.encode(rankStatus, forKey: .rankStatus)
        try container.encode(rankId, forKey: .rankId)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(lastModifiedBy, forKey: .lastModifiedBy)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(lastModifiedDate, forKey: .lastModifiedDate)
    }
}

