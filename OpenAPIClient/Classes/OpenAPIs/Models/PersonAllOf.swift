//
// PersonAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PersonAllOf: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    /** Set of RoleAssignments */
    public var roleAssignments: [RoleAssignment]?
    /** Person's call sign */
    public var callSign: String?
    public var lastName: String?
    /**  */
    public var firstName: String?
    /** 10-digit phone contact number */
    public var contactNumber: String?
    /**  */
    public var email: String?
    /** Department of Defense ID */
    public var dodId: Int64?
    /** is Person a placeholder with no DODID */
    public var isPlaceholder: Bool
    /**  */
    public var rankId: Int?
    /** List of organizations Person is associated with */
    public var organizationStatus: [String: OrganizationStatus]?
    /** Primary Organization Obj of the Person */
    public var primaryOrganizationId: UUID?
    /**  */
    public var chatUserId: String?
    /** Chat Service user name */
    public var chatUserName: String?
    /** Default role when logging into puckboard */
    public var defaultRole: String?
    /**  */
    public var last4: Int?

    public init(id: UUID? = nil, roleAssignments: [RoleAssignment]? = nil, callSign: String? = nil, lastName: String? = nil, firstName: String? = nil, contactNumber: String? = nil, email: String? = nil, dodId: Int64? = nil, isPlaceholder: Bool, rankId: Int? = nil, organizationStatus: [String: OrganizationStatus]? = nil, primaryOrganizationId: UUID? = nil, chatUserId: String? = nil, chatUserName: String? = nil, defaultRole: String? = nil, last4: Int? = nil) {
        self.id = id
        self.roleAssignments = roleAssignments
        self.callSign = callSign
        self.lastName = lastName
        self.firstName = firstName
        self.contactNumber = contactNumber
        self.email = email
        self.dodId = dodId
        self.isPlaceholder = isPlaceholder
        self.rankId = rankId
        self.organizationStatus = organizationStatus
        self.primaryOrganizationId = primaryOrganizationId
        self.chatUserId = chatUserId
        self.chatUserName = chatUserName
        self.defaultRole = defaultRole
        self.last4 = last4
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case roleAssignments
        case callSign
        case lastName
        case firstName
        case contactNumber
        case email
        case dodId
        case isPlaceholder
        case rankId
        case organizationStatus
        case primaryOrganizationId
        case chatUserId
        case chatUserName
        case defaultRole
        case last4
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(roleAssignments, forKey: .roleAssignments)
        try container.encodeIfPresent(callSign, forKey: .callSign)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(contactNumber, forKey: .contactNumber)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(dodId, forKey: .dodId)
        try container.encode(isPlaceholder, forKey: .isPlaceholder)
        try container.encodeIfPresent(rankId, forKey: .rankId)
        try container.encodeIfPresent(organizationStatus, forKey: .organizationStatus)
        try container.encodeIfPresent(primaryOrganizationId, forKey: .primaryOrganizationId)
        try container.encodeIfPresent(chatUserId, forKey: .chatUserId)
        try container.encodeIfPresent(chatUserName, forKey: .chatUserName)
        try container.encodeIfPresent(defaultRole, forKey: .defaultRole)
        try container.encodeIfPresent(last4, forKey: .last4)
    }
}

