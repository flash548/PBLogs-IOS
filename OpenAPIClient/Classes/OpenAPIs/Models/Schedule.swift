//
// Schedule.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A collection of metadata related to crew and event state that can be used to produce an optimal assignment. */
public struct Schedule: Codable, JSONEncodable, Hashable {

    /** The job role compatibility hierarchy for the associated squadron. */
    public var jobRoles: [JobRoleCompatibility]?
    /** The personnel available for scheduling within the associated squadron. */
    public var personnel: [Person]?
    /** The types of events that need to be scheduled within the associated squadron. */
    public var eventTypes: [EventType]?
    /** The events that need to be scheduled within the associated squadron. */
    public var events: [EventBase]?
    /** id of user who created the entry */
    public var createdBy: UUID?
    /** id of user who last modified the entry */
    public var lastModifiedBy: UUID?
    /** date of entry creation */
    public var createdDate: Date?
    /** date entry was last modified */
    public var lastModifiedDate: Date?

    public init(jobRoles: [JobRoleCompatibility]? = nil, personnel: [Person]? = nil, eventTypes: [EventType]? = nil, events: [EventBase]? = nil, createdBy: UUID? = nil, lastModifiedBy: UUID? = nil, createdDate: Date? = nil, lastModifiedDate: Date? = nil) {
        self.jobRoles = jobRoles
        self.personnel = personnel
        self.eventTypes = eventTypes
        self.events = events
        self.createdBy = createdBy
        self.lastModifiedBy = lastModifiedBy
        self.createdDate = createdDate
        self.lastModifiedDate = lastModifiedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case jobRoles
        case personnel
        case eventTypes
        case events
        case createdBy
        case lastModifiedBy
        case createdDate
        case lastModifiedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(jobRoles, forKey: .jobRoles)
        try container.encodeIfPresent(personnel, forKey: .personnel)
        try container.encodeIfPresent(eventTypes, forKey: .eventTypes)
        try container.encodeIfPresent(events, forKey: .events)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(lastModifiedBy, forKey: .lastModifiedBy)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(lastModifiedDate, forKey: .lastModifiedDate)
    }
}

