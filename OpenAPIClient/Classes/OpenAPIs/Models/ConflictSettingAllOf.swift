//
// ConflictSettingAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ConflictSettingAllOf: Codable, JSONEncodable, Hashable {

    /**  */
    public var id: UUID?
    /**  */
    public var eventTypeId1: Int?
    /**  */
    public var eventTypeId2: Int?
    /**  */
    public var organizationId: String?
    public var type: ConflictReasonEnum?
    /** whether or not to ignore a conflict */
    public var ignoreConflict: Bool

    public init(id: UUID? = nil, eventTypeId1: Int? = nil, eventTypeId2: Int? = nil, organizationId: String? = nil, type: ConflictReasonEnum? = nil, ignoreConflict: Bool) {
        self.id = id
        self.eventTypeId1 = eventTypeId1
        self.eventTypeId2 = eventTypeId2
        self.organizationId = organizationId
        self.type = type
        self.ignoreConflict = ignoreConflict
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case eventTypeId1
        case eventTypeId2
        case organizationId
        case type
        case ignoreConflict
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(eventTypeId1, forKey: .eventTypeId1)
        try container.encodeIfPresent(eventTypeId2, forKey: .eventTypeId2)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encode(ignoreConflict, forKey: .ignoreConflict)
    }
}

