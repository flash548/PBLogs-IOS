//
// AircrewData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** PBL Aircrew Data used in context of form781 */
public struct AircrewData: Codable, JSONEncodable, Hashable {

    /**  */
    public var id: UUID?
    /**  */
    public var flightConditionsCombatSorties: Int
    /**  */
    public var flightConditionsCombatSupportSorties: Int
    /**  */
    public var flightConditionsCombatSupportTime: Int64
    /**  */
    public var flightConditionsCombatTime: Int64
    /**  */
    public var flightConditionsInstruments: Int64
    /**  */
    public var flightConditionsNight: Int64
    /**  */
    public var flightConditionsNVG: Int64
    /**  */
    public var flightConditionsSimInstruments: Int64
    /**  */
    public var flightAuthDutyCode: String
    /**  */
    public var flyingOrganization: String?
    /**  */
    public var flightTimeEvaluator: Int64
    /**  */
    public var flightTimeInstructor: Int64
    /**  */
    public var flightTimeOther: Int64
    /**  */
    public var flightTimePrimary: Int64
    /**  */
    public var flightTimeSecondary: Int64
    /**  */
    public var flightTimeTotalSorties: Int
    /**  */
    public var flightTimeTotalTime: Int64
    /**  */
    public var personLastName: String
    /**  */
    public var personFirstName: String
    /**  */
    public var reserveStatus: Int
    /**  */
    public var personLast4: String
    public var form781: Form781?

    public init(id: UUID? = nil, flightConditionsCombatSorties: Int, flightConditionsCombatSupportSorties: Int, flightConditionsCombatSupportTime: Int64, flightConditionsCombatTime: Int64, flightConditionsInstruments: Int64, flightConditionsNight: Int64, flightConditionsNVG: Int64, flightConditionsSimInstruments: Int64, flightAuthDutyCode: String, flyingOrganization: String? = nil, flightTimeEvaluator: Int64, flightTimeInstructor: Int64, flightTimeOther: Int64, flightTimePrimary: Int64, flightTimeSecondary: Int64, flightTimeTotalSorties: Int, flightTimeTotalTime: Int64, personLastName: String, personFirstName: String, reserveStatus: Int, personLast4: String, form781: Form781? = nil) {
        self.id = id
        self.flightConditionsCombatSorties = flightConditionsCombatSorties
        self.flightConditionsCombatSupportSorties = flightConditionsCombatSupportSorties
        self.flightConditionsCombatSupportTime = flightConditionsCombatSupportTime
        self.flightConditionsCombatTime = flightConditionsCombatTime
        self.flightConditionsInstruments = flightConditionsInstruments
        self.flightConditionsNight = flightConditionsNight
        self.flightConditionsNVG = flightConditionsNVG
        self.flightConditionsSimInstruments = flightConditionsSimInstruments
        self.flightAuthDutyCode = flightAuthDutyCode
        self.flyingOrganization = flyingOrganization
        self.flightTimeEvaluator = flightTimeEvaluator
        self.flightTimeInstructor = flightTimeInstructor
        self.flightTimeOther = flightTimeOther
        self.flightTimePrimary = flightTimePrimary
        self.flightTimeSecondary = flightTimeSecondary
        self.flightTimeTotalSorties = flightTimeTotalSorties
        self.flightTimeTotalTime = flightTimeTotalTime
        self.personLastName = personLastName
        self.personFirstName = personFirstName
        self.reserveStatus = reserveStatus
        self.personLast4 = personLast4
        self.form781 = form781
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case flightConditionsCombatSorties
        case flightConditionsCombatSupportSorties
        case flightConditionsCombatSupportTime
        case flightConditionsCombatTime
        case flightConditionsInstruments
        case flightConditionsNight
        case flightConditionsNVG
        case flightConditionsSimInstruments
        case flightAuthDutyCode
        case flyingOrganization
        case flightTimeEvaluator
        case flightTimeInstructor
        case flightTimeOther
        case flightTimePrimary
        case flightTimeSecondary
        case flightTimeTotalSorties
        case flightTimeTotalTime
        case personLastName
        case personFirstName
        case reserveStatus
        case personLast4
        case form781
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(flightConditionsCombatSorties, forKey: .flightConditionsCombatSorties)
        try container.encode(flightConditionsCombatSupportSorties, forKey: .flightConditionsCombatSupportSorties)
        try container.encode(flightConditionsCombatSupportTime, forKey: .flightConditionsCombatSupportTime)
        try container.encode(flightConditionsCombatTime, forKey: .flightConditionsCombatTime)
        try container.encode(flightConditionsInstruments, forKey: .flightConditionsInstruments)
        try container.encode(flightConditionsNight, forKey: .flightConditionsNight)
        try container.encode(flightConditionsNVG, forKey: .flightConditionsNVG)
        try container.encode(flightConditionsSimInstruments, forKey: .flightConditionsSimInstruments)
        try container.encode(flightAuthDutyCode, forKey: .flightAuthDutyCode)
        try container.encodeIfPresent(flyingOrganization, forKey: .flyingOrganization)
        try container.encode(flightTimeEvaluator, forKey: .flightTimeEvaluator)
        try container.encode(flightTimeInstructor, forKey: .flightTimeInstructor)
        try container.encode(flightTimeOther, forKey: .flightTimeOther)
        try container.encode(flightTimePrimary, forKey: .flightTimePrimary)
        try container.encode(flightTimeSecondary, forKey: .flightTimeSecondary)
        try container.encode(flightTimeTotalSorties, forKey: .flightTimeTotalSorties)
        try container.encode(flightTimeTotalTime, forKey: .flightTimeTotalTime)
        try container.encode(personLastName, forKey: .personLastName)
        try container.encode(personFirstName, forKey: .personFirstName)
        try container.encode(reserveStatus, forKey: .reserveStatus)
        try container.encode(personLast4, forKey: .personLast4)
        try container.encodeIfPresent(form781, forKey: .form781)
    }
}

