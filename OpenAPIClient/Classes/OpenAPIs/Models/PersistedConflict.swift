//
// PersistedConflict.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Stores conflict data */
public struct PersistedConflict: Codable, JSONEncodable, Hashable {

    public var primaryEvent: EventBase
    public var conflictingEvent: EventBase
    public var person: Person
    public var reason: ConflictReasonEnum
    /**  */
    public var active: Bool
    /**  */
    public var waivedByUserId: UUID?
    /**  */
    public var id: UUID
    /** date entry was last modified */
    public var lastModifiedDate: Date
    /** id of user who created the entry */
    public var createdBy: UUID?
    /** id of user who last modified the entry */
    public var lastModifiedBy: UUID?
    /** date of entry creation */
    public var createdDate: Date?

    public init(primaryEvent: EventBase, conflictingEvent: EventBase, person: Person, reason: ConflictReasonEnum, active: Bool, waivedByUserId: UUID? = nil, id: UUID, lastModifiedDate: Date, createdBy: UUID? = nil, lastModifiedBy: UUID? = nil, createdDate: Date? = nil) {
        self.primaryEvent = primaryEvent
        self.conflictingEvent = conflictingEvent
        self.person = person
        self.reason = reason
        self.active = active
        self.waivedByUserId = waivedByUserId
        self.id = id
        self.lastModifiedDate = lastModifiedDate
        self.createdBy = createdBy
        self.lastModifiedBy = lastModifiedBy
        self.createdDate = createdDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case primaryEvent
        case conflictingEvent
        case person
        case reason
        case active
        case waivedByUserId
        case id
        case lastModifiedDate
        case createdBy
        case lastModifiedBy
        case createdDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(primaryEvent, forKey: .primaryEvent)
        try container.encode(conflictingEvent, forKey: .conflictingEvent)
        try container.encode(person, forKey: .person)
        try container.encode(reason, forKey: .reason)
        try container.encode(active, forKey: .active)
        try container.encodeIfPresent(waivedByUserId, forKey: .waivedByUserId)
        try container.encode(id, forKey: .id)
        try container.encode(lastModifiedDate, forKey: .lastModifiedDate)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(lastModifiedBy, forKey: .lastModifiedBy)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
    }
}

