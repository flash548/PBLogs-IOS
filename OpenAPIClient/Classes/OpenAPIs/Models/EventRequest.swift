//
// EventRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A request to participate in an event */
public struct EventRequest: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case pending = "pending"
        case approved = "approved"
        case rejected = "rejected"
        case cancelled = "cancelled"
    }
    /** The organization that the request is within */
    public var organizationId: UUID
    /** The id of the event we are requesting */
    public var eventId: UUID
    /** Unique identifier for this event request */
    public var id: UUID?
    /** The id of the role assignment we are requesting */
    public var roleAssignmentId: UUID
    /** The id of the person who is requesting */
    public var personId: UUID
    /**  */
    public var status: Status?
    /** date of entry creation */
    public var createdDate: Date?
    /** start time of event in request for notification menu */
    public var eventStartTime: Date?
    /** name of event for notification menu */
    public var eventName: String?
    /** job role id for notification message */
    public var jobRoleId: Int?
    /** Boolean value to show if EventRequest has been seen by user */
    public var isViewed: Bool?
    /** id of user who created the entry */
    public var createdBy: UUID?
    /** id of user who last modified the entry */
    public var lastModifiedBy: UUID?
    /** date entry was last modified */
    public var lastModifiedDate: Date?

    public init(organizationId: UUID, eventId: UUID, id: UUID? = nil, roleAssignmentId: UUID, personId: UUID, status: Status? = nil, createdDate: Date? = nil, eventStartTime: Date? = nil, eventName: String? = nil, jobRoleId: Int? = nil, isViewed: Bool? = nil, createdBy: UUID? = nil, lastModifiedBy: UUID? = nil, lastModifiedDate: Date? = nil) {
        self.organizationId = organizationId
        self.eventId = eventId
        self.id = id
        self.roleAssignmentId = roleAssignmentId
        self.personId = personId
        self.status = status
        self.createdDate = createdDate
        self.eventStartTime = eventStartTime
        self.eventName = eventName
        self.jobRoleId = jobRoleId
        self.isViewed = isViewed
        self.createdBy = createdBy
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedDate = lastModifiedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case organizationId
        case eventId
        case id
        case roleAssignmentId
        case personId
        case status
        case createdDate
        case eventStartTime
        case eventName
        case jobRoleId
        case isViewed
        case createdBy
        case lastModifiedBy
        case lastModifiedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(organizationId, forKey: .organizationId)
        try container.encode(eventId, forKey: .eventId)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(roleAssignmentId, forKey: .roleAssignmentId)
        try container.encode(personId, forKey: .personId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(eventStartTime, forKey: .eventStartTime)
        try container.encodeIfPresent(eventName, forKey: .eventName)
        try container.encodeIfPresent(jobRoleId, forKey: .jobRoleId)
        try container.encodeIfPresent(isViewed, forKey: .isViewed)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(lastModifiedBy, forKey: .lastModifiedBy)
        try container.encodeIfPresent(lastModifiedDate, forKey: .lastModifiedDate)
    }
}

