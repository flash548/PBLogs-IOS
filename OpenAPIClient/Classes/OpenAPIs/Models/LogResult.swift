//
// LogResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A log object */
public struct LogResult: Codable, JSONEncodable, Hashable {

    /** Identifier of which `LogResult` this is */
    public var logId: UUID
    /** URI that was called */
    public var uri: String
    /** HTTP status code returned */
    public var status: Int?
    /** REST Verb called */
    public var method: String?
    /** UUID of the person that initiated the API call */
    public var principalId: String?
    /** Query parameters sent with the API request */
    public var queryParameters: String?
    /** User agent from the requester */
    public var userAgent: String?
    /** Time log was captured */
    public var timeStamp: Date?
    /**  */
    public var stackTrace: [StackTrace]?

    public init(logId: UUID, uri: String, status: Int? = nil, method: String? = nil, principalId: String? = nil, queryParameters: String? = nil, userAgent: String? = nil, timeStamp: Date? = nil, stackTrace: [StackTrace]? = nil) {
        self.logId = logId
        self.uri = uri
        self.status = status
        self.method = method
        self.principalId = principalId
        self.queryParameters = queryParameters
        self.userAgent = userAgent
        self.timeStamp = timeStamp
        self.stackTrace = stackTrace
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case logId = "log_id"
        case uri
        case status
        case method
        case principalId = "principal_id"
        case queryParameters = "query_parameters"
        case userAgent = "user_agent"
        case timeStamp = "time_stamp"
        case stackTrace
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(logId, forKey: .logId)
        try container.encode(uri, forKey: .uri)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(method, forKey: .method)
        try container.encodeIfPresent(principalId, forKey: .principalId)
        try container.encodeIfPresent(queryParameters, forKey: .queryParameters)
        try container.encodeIfPresent(userAgent, forKey: .userAgent)
        try container.encodeIfPresent(timeStamp, forKey: .timeStamp)
        try container.encodeIfPresent(stackTrace, forKey: .stackTrace)
    }
}

