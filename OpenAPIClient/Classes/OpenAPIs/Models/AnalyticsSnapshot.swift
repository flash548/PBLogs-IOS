//
// AnalyticsSnapshot.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Snapshot of Analytics */
public struct AnalyticsSnapshot: Codable, JSONEncodable, Hashable {

    /**  */
    public var id: String
    public var queryType: AnalyticsQueryTypeEnum
    /** Total active users for time period */
    public var totalActiveUsers: Int
    /** Total requests to work for the time period */
    public var totalRequestsToWork: Int
    /** Total active users so far that day */
    public var daysTotalActiveUsers: Int
    /** Total requests to work so far that day */
    public var daysTotalRequestsToWork: Int
    /** Total number of users in the system at request time */
    public var totalUsers: Int
    /** Total number of events in the system at request time */
    public var totalEvents: Int
    /** Total number of organizations in the system at request time */
    public var totalOrganizations: Int
    /** date request executed */
    public var timeStamp: Date?
    /** Query start time */
    public var queryStartTime: Date
    /** Query end time */
    public var queryEndTime: Date

    public init(id: String, queryType: AnalyticsQueryTypeEnum, totalActiveUsers: Int, totalRequestsToWork: Int, daysTotalActiveUsers: Int, daysTotalRequestsToWork: Int, totalUsers: Int, totalEvents: Int, totalOrganizations: Int, timeStamp: Date? = nil, queryStartTime: Date, queryEndTime: Date) {
        self.id = id
        self.queryType = queryType
        self.totalActiveUsers = totalActiveUsers
        self.totalRequestsToWork = totalRequestsToWork
        self.daysTotalActiveUsers = daysTotalActiveUsers
        self.daysTotalRequestsToWork = daysTotalRequestsToWork
        self.totalUsers = totalUsers
        self.totalEvents = totalEvents
        self.totalOrganizations = totalOrganizations
        self.timeStamp = timeStamp
        self.queryStartTime = queryStartTime
        self.queryEndTime = queryEndTime
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case queryType = "query_type"
        case totalActiveUsers = "total_active_users"
        case totalRequestsToWork = "total_requests_to_work"
        case daysTotalActiveUsers = "days_total_active_users"
        case daysTotalRequestsToWork = "days_total_requests_to_work"
        case totalUsers = "total_users"
        case totalEvents = "total_events"
        case totalOrganizations = "total_organizations"
        case timeStamp = "time_stamp"
        case queryStartTime = "query_start_time"
        case queryEndTime = "query_end_time"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(queryType, forKey: .queryType)
        try container.encode(totalActiveUsers, forKey: .totalActiveUsers)
        try container.encode(totalRequestsToWork, forKey: .totalRequestsToWork)
        try container.encode(daysTotalActiveUsers, forKey: .daysTotalActiveUsers)
        try container.encode(daysTotalRequestsToWork, forKey: .daysTotalRequestsToWork)
        try container.encode(totalUsers, forKey: .totalUsers)
        try container.encode(totalEvents, forKey: .totalEvents)
        try container.encode(totalOrganizations, forKey: .totalOrganizations)
        try container.encodeIfPresent(timeStamp, forKey: .timeStamp)
        try container.encode(queryStartTime, forKey: .queryStartTime)
        try container.encode(queryEndTime, forKey: .queryEndTime)
    }
}

