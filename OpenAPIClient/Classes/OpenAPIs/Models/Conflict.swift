//
// Conflict.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data type for event conflicts. Note that the \&quot;reason\&quot; will be one of the following: - TimeOverlap - CrewRestViolation - RoleConflict (not yet implemented--will have a null conflictingEventId)  */
public struct Conflict: Codable, JSONEncodable, Hashable {

    public var reason: ConflictReasonEnum
    public var primaryEvent: EventBase
    public var conflictingEvent: EventBase
    public var personId: UUID
    public var id: UUID
    /** id of user who created the entry */
    public var createdBy: UUID?
    /** id of user who last modified the entry */
    public var lastModifiedBy: UUID?
    /** date of entry creation */
    public var createdDate: Date?
    /** date entry was last modified */
    public var lastModifiedDate: Date?

    public init(reason: ConflictReasonEnum, primaryEvent: EventBase, conflictingEvent: EventBase, personId: UUID, id: UUID, createdBy: UUID? = nil, lastModifiedBy: UUID? = nil, createdDate: Date? = nil, lastModifiedDate: Date? = nil) {
        self.reason = reason
        self.primaryEvent = primaryEvent
        self.conflictingEvent = conflictingEvent
        self.personId = personId
        self.id = id
        self.createdBy = createdBy
        self.lastModifiedBy = lastModifiedBy
        self.createdDate = createdDate
        self.lastModifiedDate = lastModifiedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case reason
        case primaryEvent
        case conflictingEvent
        case personId
        case id
        case createdBy
        case lastModifiedBy
        case createdDate
        case lastModifiedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(reason, forKey: .reason)
        try container.encode(primaryEvent, forKey: .primaryEvent)
        try container.encode(conflictingEvent, forKey: .conflictingEvent)
        try container.encode(personId, forKey: .personId)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(lastModifiedBy, forKey: .lastModifiedBy)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(lastModifiedDate, forKey: .lastModifiedDate)
    }
}

