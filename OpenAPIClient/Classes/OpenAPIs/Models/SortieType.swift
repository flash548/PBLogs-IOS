//
// SortieType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct SortieType: Codable, JSONEncodable, Hashable {

    public var isAeromedevac: Bool?
    public var isAirdrop: Bool?
    public var isAirland: Bool?
    public var isAirRefueling: Bool?
    public var isAirRefuelingTanker: Bool?
    public var isAMCForm54Filed: Bool?
    public var isAMCForm97Filed: Bool?
    public var isAMCForm457Filed: Bool?
    public var isAMCForm651Filed: Bool?
    public var isAMCForm853Filed: Bool?
    public var isAskTACCFiled: Bool?
    public var isCombat: Bool?
    public var isCombatSupport: Bool?
    public var isDistinguishedVisitor: Bool?
    public var isHumanitarian: Bool?
    public var isSortieDelay: Bool?
    public var isSpecialOpsLL2: Bool?
    public var sortieDelayRemarks: String?

    public init(isAeromedevac: Bool? = nil, isAirdrop: Bool? = nil, isAirland: Bool? = nil, isAirRefueling: Bool? = nil, isAirRefuelingTanker: Bool? = nil, isAMCForm54Filed: Bool? = nil, isAMCForm97Filed: Bool? = nil, isAMCForm457Filed: Bool? = nil, isAMCForm651Filed: Bool? = nil, isAMCForm853Filed: Bool? = nil, isAskTACCFiled: Bool? = nil, isCombat: Bool? = nil, isCombatSupport: Bool? = nil, isDistinguishedVisitor: Bool? = nil, isHumanitarian: Bool? = nil, isSortieDelay: Bool? = nil, isSpecialOpsLL2: Bool? = nil, sortieDelayRemarks: String? = nil) {
        self.isAeromedevac = isAeromedevac
        self.isAirdrop = isAirdrop
        self.isAirland = isAirland
        self.isAirRefueling = isAirRefueling
        self.isAirRefuelingTanker = isAirRefuelingTanker
        self.isAMCForm54Filed = isAMCForm54Filed
        self.isAMCForm97Filed = isAMCForm97Filed
        self.isAMCForm457Filed = isAMCForm457Filed
        self.isAMCForm651Filed = isAMCForm651Filed
        self.isAMCForm853Filed = isAMCForm853Filed
        self.isAskTACCFiled = isAskTACCFiled
        self.isCombat = isCombat
        self.isCombatSupport = isCombatSupport
        self.isDistinguishedVisitor = isDistinguishedVisitor
        self.isHumanitarian = isHumanitarian
        self.isSortieDelay = isSortieDelay
        self.isSpecialOpsLL2 = isSpecialOpsLL2
        self.sortieDelayRemarks = sortieDelayRemarks
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case isAeromedevac
        case isAirdrop
        case isAirland
        case isAirRefueling
        case isAirRefuelingTanker
        case isAMCForm54Filed
        case isAMCForm97Filed
        case isAMCForm457Filed
        case isAMCForm651Filed
        case isAMCForm853Filed
        case isAskTACCFiled
        case isCombat
        case isCombatSupport
        case isDistinguishedVisitor
        case isHumanitarian
        case isSortieDelay
        case isSpecialOpsLL2
        case sortieDelayRemarks
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(isAeromedevac, forKey: .isAeromedevac)
        try container.encodeIfPresent(isAirdrop, forKey: .isAirdrop)
        try container.encodeIfPresent(isAirland, forKey: .isAirland)
        try container.encodeIfPresent(isAirRefueling, forKey: .isAirRefueling)
        try container.encodeIfPresent(isAirRefuelingTanker, forKey: .isAirRefuelingTanker)
        try container.encodeIfPresent(isAMCForm54Filed, forKey: .isAMCForm54Filed)
        try container.encodeIfPresent(isAMCForm97Filed, forKey: .isAMCForm97Filed)
        try container.encodeIfPresent(isAMCForm457Filed, forKey: .isAMCForm457Filed)
        try container.encodeIfPresent(isAMCForm651Filed, forKey: .isAMCForm651Filed)
        try container.encodeIfPresent(isAMCForm853Filed, forKey: .isAMCForm853Filed)
        try container.encodeIfPresent(isAskTACCFiled, forKey: .isAskTACCFiled)
        try container.encodeIfPresent(isCombat, forKey: .isCombat)
        try container.encodeIfPresent(isCombatSupport, forKey: .isCombatSupport)
        try container.encodeIfPresent(isDistinguishedVisitor, forKey: .isDistinguishedVisitor)
        try container.encodeIfPresent(isHumanitarian, forKey: .isHumanitarian)
        try container.encodeIfPresent(isSortieDelay, forKey: .isSortieDelay)
        try container.encodeIfPresent(isSpecialOpsLL2, forKey: .isSpecialOpsLL2)
        try container.encodeIfPresent(sortieDelayRemarks, forKey: .sortieDelayRemarks)
    }
}

