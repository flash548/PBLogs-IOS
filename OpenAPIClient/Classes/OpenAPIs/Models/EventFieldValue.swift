//
// EventFieldValue.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Generic field entries for event forms */
public struct EventFieldValue: Codable, JSONEncodable, Hashable {

    /** UUID */
    public var id: UUID?
    /** ID of the Event */
    public var eventId: UUID?
    /**  */
    public var value: String?
    /** ID of the field type (i.e. String, Date, Integer/Number) */
    public var eventFieldId: UUID?
    /** id of user who created the entry */
    public var createdBy: UUID?
    /** id of user who last modified the entry */
    public var lastModifiedBy: UUID?
    /** date of entry creation */
    public var createdDate: Date?
    /** date entry was last modified */
    public var lastModifiedDate: Date?

    public init(id: UUID? = nil, eventId: UUID? = nil, value: String? = nil, eventFieldId: UUID? = nil, createdBy: UUID? = nil, lastModifiedBy: UUID? = nil, createdDate: Date? = nil, lastModifiedDate: Date? = nil) {
        self.id = id
        self.eventId = eventId
        self.value = value
        self.eventFieldId = eventFieldId
        self.createdBy = createdBy
        self.lastModifiedBy = lastModifiedBy
        self.createdDate = createdDate
        self.lastModifiedDate = lastModifiedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case eventId
        case value
        case eventFieldId
        case createdBy
        case lastModifiedBy
        case createdDate
        case lastModifiedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(eventId, forKey: .eventId)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(eventFieldId, forKey: .eventFieldId)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(lastModifiedBy, forKey: .lastModifiedBy)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(lastModifiedDate, forKey: .lastModifiedDate)
    }
}

