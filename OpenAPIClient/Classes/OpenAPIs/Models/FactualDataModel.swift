//
// FactualDataModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct FactualDataModel: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var type: String?
    public var callSign: String?
    public var majcom: String?
    public var unit: String?
    public var homeStation: String?
    public var departureAirdome: String?
    public var destinationAirdome: String?
    public var flightPlan: String?
    public var course: String?
    public var heading: String?
    public var route: String?
    public var controllingAgencyName: String?
    public var controllingAgencyGroup: String?
    public var radarService: String?
    public var controllingAgencyGroupOther: String?
    public var controllingAgencyNameUnknown: Bool?
    public var flightActivity: String?

    public init(id: UUID? = nil, type: String? = nil, callSign: String? = nil, majcom: String? = nil, unit: String? = nil, homeStation: String? = nil, departureAirdome: String? = nil, destinationAirdome: String? = nil, flightPlan: String? = nil, course: String? = nil, heading: String? = nil, route: String? = nil, controllingAgencyName: String? = nil, controllingAgencyGroup: String? = nil, radarService: String? = nil, controllingAgencyGroupOther: String? = nil, controllingAgencyNameUnknown: Bool? = nil, flightActivity: String? = nil) {
        self.id = id
        self.type = type
        self.callSign = callSign
        self.majcom = majcom
        self.unit = unit
        self.homeStation = homeStation
        self.departureAirdome = departureAirdome
        self.destinationAirdome = destinationAirdome
        self.flightPlan = flightPlan
        self.course = course
        self.heading = heading
        self.route = route
        self.controllingAgencyName = controllingAgencyName
        self.controllingAgencyGroup = controllingAgencyGroup
        self.radarService = radarService
        self.controllingAgencyGroupOther = controllingAgencyGroupOther
        self.controllingAgencyNameUnknown = controllingAgencyNameUnknown
        self.flightActivity = flightActivity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case callSign
        case majcom
        case unit
        case homeStation
        case departureAirdome
        case destinationAirdome
        case flightPlan
        case course
        case heading
        case route
        case controllingAgencyName
        case controllingAgencyGroup
        case radarService
        case controllingAgencyGroupOther
        case controllingAgencyNameUnknown
        case flightActivity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(callSign, forKey: .callSign)
        try container.encodeIfPresent(majcom, forKey: .majcom)
        try container.encodeIfPresent(unit, forKey: .unit)
        try container.encodeIfPresent(homeStation, forKey: .homeStation)
        try container.encodeIfPresent(departureAirdome, forKey: .departureAirdome)
        try container.encodeIfPresent(destinationAirdome, forKey: .destinationAirdome)
        try container.encodeIfPresent(flightPlan, forKey: .flightPlan)
        try container.encodeIfPresent(course, forKey: .course)
        try container.encodeIfPresent(heading, forKey: .heading)
        try container.encodeIfPresent(route, forKey: .route)
        try container.encodeIfPresent(controllingAgencyName, forKey: .controllingAgencyName)
        try container.encodeIfPresent(controllingAgencyGroup, forKey: .controllingAgencyGroup)
        try container.encodeIfPresent(radarService, forKey: .radarService)
        try container.encodeIfPresent(controllingAgencyGroupOther, forKey: .controllingAgencyGroupOther)
        try container.encodeIfPresent(controllingAgencyNameUnknown, forKey: .controllingAgencyNameUnknown)
        try container.encodeIfPresent(flightActivity, forKey: .flightActivity)
    }
}

