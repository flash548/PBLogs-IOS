//
// OrganizationAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrganizationAllOf: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case wing = "Wing"
        case squadron = "Squadron"
    }
    /**  */
    public var parent: UUID?
    /** number of people assigned */
    public var numMembers: Int64?
    /** number of days since organization made an event */
    public var daysLastScheduledEvent: Int64?
    /**  */
    public var organizationId: UUID
    /**  */
    public var organizationName: String
    /**  */
    public var armsOrganizationId: String?
    /**  */
    public var harmCode: String?
    /**  */
    public var isSchedulingUnit: Bool?
    /** Branch ID (not an object) */
    public var branchId: Int?
    /**  */
    public var type: ModelType?
    /**  */
    public var chatTeams: [ChatTeam]?
    /**  */
    public var isPblEnabled: Bool?
    /**  */
    public var isArmsEnabled: Bool
    public var armsProgramCode: ArmsProgramCodeEnum?

    public init(parent: UUID? = nil, numMembers: Int64? = nil, daysLastScheduledEvent: Int64? = nil, organizationId: UUID, organizationName: String, armsOrganizationId: String? = nil, harmCode: String? = nil, isSchedulingUnit: Bool? = nil, branchId: Int? = nil, type: ModelType? = nil, chatTeams: [ChatTeam]? = nil, isPblEnabled: Bool? = nil, isArmsEnabled: Bool, armsProgramCode: ArmsProgramCodeEnum? = nil) {
        self.parent = parent
        self.numMembers = numMembers
        self.daysLastScheduledEvent = daysLastScheduledEvent
        self.organizationId = organizationId
        self.organizationName = organizationName
        self.armsOrganizationId = armsOrganizationId
        self.harmCode = harmCode
        self.isSchedulingUnit = isSchedulingUnit
        self.branchId = branchId
        self.type = type
        self.chatTeams = chatTeams
        self.isPblEnabled = isPblEnabled
        self.isArmsEnabled = isArmsEnabled
        self.armsProgramCode = armsProgramCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case parent
        case numMembers
        case daysLastScheduledEvent
        case organizationId
        case organizationName
        case armsOrganizationId
        case harmCode
        case isSchedulingUnit
        case branchId
        case type
        case chatTeams
        case isPblEnabled
        case isArmsEnabled
        case armsProgramCode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(parent, forKey: .parent)
        try container.encodeIfPresent(numMembers, forKey: .numMembers)
        try container.encodeIfPresent(daysLastScheduledEvent, forKey: .daysLastScheduledEvent)
        try container.encode(organizationId, forKey: .organizationId)
        try container.encode(organizationName, forKey: .organizationName)
        try container.encodeIfPresent(armsOrganizationId, forKey: .armsOrganizationId)
        try container.encodeIfPresent(harmCode, forKey: .harmCode)
        try container.encodeIfPresent(isSchedulingUnit, forKey: .isSchedulingUnit)
        try container.encodeIfPresent(branchId, forKey: .branchId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(chatTeams, forKey: .chatTeams)
        try container.encodeIfPresent(isPblEnabled, forKey: .isPblEnabled)
        try container.encode(isArmsEnabled, forKey: .isArmsEnabled)
        try container.encodeIfPresent(armsProgramCode, forKey: .armsProgramCode)
    }
}

