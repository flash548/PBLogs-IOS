//
// Form781.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct Form781: Codable, JSONEncodable, Hashable {

    /**  */
    public var armsAuditDate: Date?
    /**  */
    public var armsAuditInitials: String?
    /**  */
    public var armsInputDate: Date?
    /**  */
    public var armsInputInitials: String?
    /**  */
    public var date: Date?
    /**  */
    public var extractCertificationBranch: String?
    /**  */
    public var extractCertificationDSN: String?
    /**  */
    public var extractCertificationPrintName: String?
    /**  */
    public var extractCertificationRank: String?
    /**  */
    public var flightAuthNum: String?
    /**  */
    public var grandTotalFullStop: Int?
    /**  */
    public var grandTotalLandings: Int?
    /**  */
    public var grandTotalSorties: Int?
    /**  */
    public var grandTotalTime: Int64?
    /**  */
    public var grandTotalTouchAndGo: Int?
    /**  */
    public var harmLocation: String?
    /**  */
    public var issuingUnit: String?
    /**  */
    public var isComplete: Bool?
    /**  */
    public var lastPrinted: Date?
    /**  */
    public var lastShared: Date?
    /**  */
    public var maintenanceReview: String?
    /**  */
    public var mds: String?
    /**  */
    public var remarks: String?
    /**  */
    public var sarmReview: String?
    /**  */
    public var serialNumber: String?
    /**  */
    public var unitCharged: String?
    /**  */
    public var aircrewData: [AircrewData]?
    /**  */
    public var flights: [Flight]?
    /**  */
    public var form781ID: UUID?

    public init(armsAuditDate: Date? = nil, armsAuditInitials: String? = nil, armsInputDate: Date? = nil, armsInputInitials: String? = nil, date: Date? = nil, extractCertificationBranch: String? = nil, extractCertificationDSN: String? = nil, extractCertificationPrintName: String? = nil, extractCertificationRank: String? = nil, flightAuthNum: String? = nil, grandTotalFullStop: Int? = nil, grandTotalLandings: Int? = nil, grandTotalSorties: Int? = nil, grandTotalTime: Int64? = nil, grandTotalTouchAndGo: Int? = nil, harmLocation: String? = nil, issuingUnit: String? = nil, isComplete: Bool? = nil, lastPrinted: Date? = nil, lastShared: Date? = nil, maintenanceReview: String? = nil, mds: String? = nil, remarks: String? = nil, sarmReview: String? = nil, serialNumber: String? = nil, unitCharged: String? = nil, aircrewData: [AircrewData]? = nil, flights: [Flight]? = nil, form781ID: UUID? = nil) {
        self.armsAuditDate = armsAuditDate
        self.armsAuditInitials = armsAuditInitials
        self.armsInputDate = armsInputDate
        self.armsInputInitials = armsInputInitials
        self.date = date
        self.extractCertificationBranch = extractCertificationBranch
        self.extractCertificationDSN = extractCertificationDSN
        self.extractCertificationPrintName = extractCertificationPrintName
        self.extractCertificationRank = extractCertificationRank
        self.flightAuthNum = flightAuthNum
        self.grandTotalFullStop = grandTotalFullStop
        self.grandTotalLandings = grandTotalLandings
        self.grandTotalSorties = grandTotalSorties
        self.grandTotalTime = grandTotalTime
        self.grandTotalTouchAndGo = grandTotalTouchAndGo
        self.harmLocation = harmLocation
        self.issuingUnit = issuingUnit
        self.isComplete = isComplete
        self.lastPrinted = lastPrinted
        self.lastShared = lastShared
        self.maintenanceReview = maintenanceReview
        self.mds = mds
        self.remarks = remarks
        self.sarmReview = sarmReview
        self.serialNumber = serialNumber
        self.unitCharged = unitCharged
        self.aircrewData = aircrewData
        self.flights = flights
        self.form781ID = form781ID
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case armsAuditDate
        case armsAuditInitials
        case armsInputDate
        case armsInputInitials
        case date
        case extractCertificationBranch
        case extractCertificationDSN
        case extractCertificationPrintName
        case extractCertificationRank
        case flightAuthNum
        case grandTotalFullStop
        case grandTotalLandings
        case grandTotalSorties
        case grandTotalTime
        case grandTotalTouchAndGo
        case harmLocation
        case issuingUnit
        case isComplete
        case lastPrinted
        case lastShared
        case maintenanceReview
        case mds
        case remarks
        case sarmReview
        case serialNumber
        case unitCharged
        case aircrewData
        case flights
        case form781ID
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(armsAuditDate, forKey: .armsAuditDate)
        try container.encodeIfPresent(armsAuditInitials, forKey: .armsAuditInitials)
        try container.encodeIfPresent(armsInputDate, forKey: .armsInputDate)
        try container.encodeIfPresent(armsInputInitials, forKey: .armsInputInitials)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(extractCertificationBranch, forKey: .extractCertificationBranch)
        try container.encodeIfPresent(extractCertificationDSN, forKey: .extractCertificationDSN)
        try container.encodeIfPresent(extractCertificationPrintName, forKey: .extractCertificationPrintName)
        try container.encodeIfPresent(extractCertificationRank, forKey: .extractCertificationRank)
        try container.encodeIfPresent(flightAuthNum, forKey: .flightAuthNum)
        try container.encodeIfPresent(grandTotalFullStop, forKey: .grandTotalFullStop)
        try container.encodeIfPresent(grandTotalLandings, forKey: .grandTotalLandings)
        try container.encodeIfPresent(grandTotalSorties, forKey: .grandTotalSorties)
        try container.encodeIfPresent(grandTotalTime, forKey: .grandTotalTime)
        try container.encodeIfPresent(grandTotalTouchAndGo, forKey: .grandTotalTouchAndGo)
        try container.encodeIfPresent(harmLocation, forKey: .harmLocation)
        try container.encodeIfPresent(issuingUnit, forKey: .issuingUnit)
        try container.encodeIfPresent(isComplete, forKey: .isComplete)
        try container.encodeIfPresent(lastPrinted, forKey: .lastPrinted)
        try container.encodeIfPresent(lastShared, forKey: .lastShared)
        try container.encodeIfPresent(maintenanceReview, forKey: .maintenanceReview)
        try container.encodeIfPresent(mds, forKey: .mds)
        try container.encodeIfPresent(remarks, forKey: .remarks)
        try container.encodeIfPresent(sarmReview, forKey: .sarmReview)
        try container.encodeIfPresent(serialNumber, forKey: .serialNumber)
        try container.encodeIfPresent(unitCharged, forKey: .unitCharged)
        try container.encodeIfPresent(aircrewData, forKey: .aircrewData)
        try container.encodeIfPresent(flights, forKey: .flights)
        try container.encodeIfPresent(form781ID, forKey: .form781ID)
    }
}

