//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     Get basic api endpoint analytics
     
     - parameter endTime: (query)  (optional)
     - parameter startTime: (query) Filter by start time (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyticsGet(endTime: Date? = nil, startTime: Date? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Analytics?, _ error: Error?) -> Void)) -> RequestTask {
        return analyticsGetWithRequestBuilder(endTime: endTime, startTime: startTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get basic api endpoint analytics
     - GET /analytics
     - Gets basic analytics.
     - parameter endTime: (query)  (optional)
     - parameter startTime: (query) Filter by start time (optional)
     - returns: RequestBuilder<Analytics> 
     */
    open class func analyticsGetWithRequestBuilder(endTime: Date? = nil, startTime: Date? = nil) -> RequestBuilder<Analytics> {
        let localVariablePath = "/analytics"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "endTime": (wrappedValue: endTime?.encodeToJSON(), isExplode: true),
            "startTime": (wrappedValue: startTime?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Analytics>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get updated basic api endpoint analytics
     
     - parameter endTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - parameter startTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyticsV2Get(endTime: Date? = nil, startTime: Date? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Analytics?, _ error: Error?) -> Void)) -> RequestTask {
        return analyticsV2GetWithRequestBuilder(endTime: endTime, startTime: startTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get updated basic api endpoint analytics
     - GET /analyticsV2
     - parameter endTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - parameter startTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - returns: RequestBuilder<Analytics> 
     */
    open class func analyticsV2GetWithRequestBuilder(endTime: Date? = nil, startTime: Date? = nil) -> RequestBuilder<Analytics> {
        let localVariablePath = "/analyticsV2"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "endTime": (wrappedValue: endTime?.encodeToJSON(), isExplode: true),
            "startTime": (wrappedValue: startTime?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Analytics>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get analytics history for given time period
     
     - parameter endTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - parameter startTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - parameter type: (query) Type of snapshots to return (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyticsV2HistoryGet(endTime: Date? = nil, startTime: Date? = nil, type: AnalyticsQueryTypeEnum? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnalyticsHistory?, _ error: Error?) -> Void)) -> RequestTask {
        return analyticsV2HistoryGetWithRequestBuilder(endTime: endTime, startTime: startTime, type: type).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get analytics history for given time period
     - GET /analyticsV2/history
     - parameter endTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - parameter startTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - parameter type: (query) Type of snapshots to return (optional)
     - returns: RequestBuilder<AnalyticsHistory> 
     */
    open class func analyticsV2HistoryGetWithRequestBuilder(endTime: Date? = nil, startTime: Date? = nil, type: AnalyticsQueryTypeEnum? = nil) -> RequestBuilder<AnalyticsHistory> {
        let localVariablePath = "/analyticsV2/history"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "endTime": (wrappedValue: endTime?.encodeToJSON(), isExplode: true),
            "startTime": (wrappedValue: startTime?.encodeToJSON(), isExplode: true),
            "Type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnalyticsHistory>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get updated basic api endpoint analytics
     
     - parameter endTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - parameter startTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - parameter pageNumber: (query) Page to return, default 0 (optional)
     - parameter pageSize: (query) Number of results to per page, default 25 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyticsV2LogsGet(endTime: Date? = nil, startTime: Date? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Logs?, _ error: Error?) -> Void)) -> RequestTask {
        return analyticsV2LogsGetWithRequestBuilder(endTime: endTime, startTime: startTime, pageNumber: pageNumber, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get updated basic api endpoint analytics
     - GET /analyticsV2/logs
     - parameter endTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - parameter startTime: (query) ISO STRING &#x60;YYYY-MM-DDTHH:mm:ss.SSSZ&#x60; (optional)
     - parameter pageNumber: (query) Page to return, default 0 (optional)
     - parameter pageSize: (query) Number of results to per page, default 25 (optional)
     - returns: RequestBuilder<Logs> 
     */
    open class func analyticsV2LogsGetWithRequestBuilder(endTime: Date? = nil, startTime: Date? = nil, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<Logs> {
        let localVariablePath = "/analyticsV2/logs"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "endTime": (wrappedValue: endTime?.encodeToJSON(), isExplode: true),
            "startTime": (wrappedValue: startTime?.encodeToJSON(), isExplode: true),
            "pageNumber": (wrappedValue: pageNumber?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Logs>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) Organization to fetch for 
     - parameter customBoxContent: (body) New or Updated Custom Content Box Model 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func bigboardOrganizationIdPost(organizationId: UUID, customBoxContent: CustomBoxContent, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return bigboardOrganizationIdPostWithRequestBuilder(organizationId: organizationId, customBoxContent: customBoxContent).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /bigboard/{organizationId}
     - Updates or inserts the content for an organizations's BigBoard content box
     - parameter organizationId: (path) Organization to fetch for 
     - parameter customBoxContent: (body) New or Updated Custom Content Box Model 
     - returns: RequestBuilder<Void> 
     */
    open class func bigboardOrganizationIdPostWithRequestBuilder(organizationId: UUID, customBoxContent: CustomBoxContent) -> RequestBuilder<Void> {
        var localVariablePath = "/bigboard/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customBoxContent)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Endpoint to upload personnel excel
     
     - parameter branchId: (path)  
     - parameter file: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func branchBranchIdUploadPersonnelPost(branchId: Int, file: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PersonUploadResult?, _ error: Error?) -> Void)) -> RequestTask {
        return branchBranchIdUploadPersonnelPostWithRequestBuilder(branchId: branchId, file: file).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Endpoint to upload personnel excel
     - POST /branch/{branchId}/uploadPersonnel
     - Batch personnel upload
     - parameter branchId: (path)  
     - parameter file: (form)  (optional)
     - returns: RequestBuilder<PersonUploadResult> 
     */
    open class func branchBranchIdUploadPersonnelPostWithRequestBuilder(branchId: Int, file: URL? = nil) -> RequestBuilder<PersonUploadResult> {
        var localVariablePath = "/branch/{branchId}/uploadPersonnel"
        let branchIdPreEscape = "\(APIHelper.mapValueToPathItem(branchId))"
        let branchIdPostEscape = branchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{branchId}", with: branchIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PersonUploadResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets information about all branches
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func branchGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MilitaryBranchListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return branchGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets information about all branches
     - GET /branch
     - returns: RequestBuilder<MilitaryBranchListResult> 
     */
    open class func branchGetWithRequestBuilder() -> RequestBuilder<MilitaryBranchListResult> {
        let localVariablePath = "/branch"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MilitaryBranchListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter channelRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func channelCreateAndAddMembersPost(channelRequest: ChannelRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ChannelResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return channelCreateAndAddMembersPostWithRequestBuilder(channelRequest: channelRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /channel/createAndAddMembers
     - parameter channelRequest: (body)  
     - returns: RequestBuilder<ChannelResponse> 
     */
    open class func channelCreateAndAddMembersPostWithRequestBuilder(channelRequest: ChannelRequest) -> RequestBuilder<ChannelResponse> {
        let localVariablePath = "/channel/createAndAddMembers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channelRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ChannelResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter channelMembersRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func channelUpdateMembersPut(channelMembersRequest: ChannelMembersRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ChannelResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return channelUpdateMembersPutWithRequestBuilder(channelMembersRequest: channelMembersRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /channel/updateMembers
     - parameter channelMembersRequest: (body)  
     - returns: RequestBuilder<ChannelResponse> 
     */
    open class func channelUpdateMembersPutWithRequestBuilder(channelMembersRequest: ChannelMembersRequest) -> RequestBuilder<ChannelResponse> {
        let localVariablePath = "/channel/updateMembers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channelMembersRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ChannelResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update chat team entry
     
     - parameter chatTeamId: (path) unique identifier of chat team 
     - parameter chatTeam: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func chatTeamChatTeamIdPut(chatTeamId: Int, chatTeam: ChatTeam, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return chatTeamChatTeamIdPutWithRequestBuilder(chatTeamId: chatTeamId, chatTeam: chatTeam).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update chat team entry
     - PUT /chatTeam/{chatTeamId}
     - parameter chatTeamId: (path) unique identifier of chat team 
     - parameter chatTeam: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func chatTeamChatTeamIdPutWithRequestBuilder(chatTeamId: Int, chatTeam: ChatTeam) -> RequestBuilder<Void> {
        var localVariablePath = "/chatTeam/{chatTeamId}"
        let chatTeamIdPreEscape = "\(APIHelper.mapValueToPathItem(chatTeamId))"
        let chatTeamIdPostEscape = chatTeamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatTeamId}", with: chatTeamIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: chatTeam)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List of chat teams that the puckboard bot is a part of
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func chatTeamGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ChatTeamResultList?, _ error: Error?) -> Void)) -> RequestTask {
        return chatTeamGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List of chat teams that the puckboard bot is a part of
     - GET /chatTeam
     - Gets a list of ChatTeam entities
     - returns: RequestBuilder<ChatTeamResultList> 
     */
    open class func chatTeamGetWithRequestBuilder() -> RequestBuilder<ChatTeamResultList> {
        let localVariablePath = "/chatTeam"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ChatTeamResultList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Pulls the Common API Health status for ARMS Gateway
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func commonApiArmsHealthGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommonApiComponent?, _ error: Error?) -> Void)) -> RequestTask {
        return commonApiArmsHealthGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Pulls the Common API Health status for ARMS Gateway
     - GET /common-api/arms-health
     - returns: RequestBuilder<CommonApiComponent> 
     */
    open class func commonApiArmsHealthGetWithRequestBuilder() -> RequestBuilder<CommonApiComponent> {
        let localVariablePath = "/common-api/arms-health"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommonApiComponent>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Crew availability for a specific event
     
     - parameter eventBase: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func conflictsPost(eventBase: EventBase, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConflictListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return conflictsPostWithRequestBuilder(eventBase: eventBase).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Crew availability for a specific event
     - POST /conflicts
     - parameter eventBase: (body)  
     - returns: RequestBuilder<ConflictListResult> 
     */
    open class func conflictsPostWithRequestBuilder(eventBase: EventBase) -> RequestBuilder<ConflictListResult> {
        let localVariablePath = "/conflicts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventBase)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConflictListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path)  
     - parameter primaryEventTypeId: (query) Id of the primary event type 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func conflictsSettingsOrganizationIdGet(organizationId: String, primaryEventTypeId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConflictSettingListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return conflictsSettingsOrganizationIdGetWithRequestBuilder(organizationId: organizationId, primaryEventTypeId: primaryEventTypeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /conflicts/settings/{organizationId}
     - parameter organizationId: (path)  
     - parameter primaryEventTypeId: (query) Id of the primary event type 
     - returns: RequestBuilder<ConflictSettingListResult> 
     */
    open class func conflictsSettingsOrganizationIdGetWithRequestBuilder(organizationId: String, primaryEventTypeId: Int) -> RequestBuilder<ConflictSettingListResult> {
        var localVariablePath = "/conflicts/settings/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "primaryEventTypeId": (wrappedValue: primaryEventTypeId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConflictSettingListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Updates conflict settings for org
     
     - parameter organizationId: (path)  
     - parameter primaryEventTypeId: (query) Id of the primary event type 
     - parameter conflictSetting: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func conflictsSettingsOrganizationIdPut(organizationId: String, primaryEventTypeId: Int, conflictSetting: [ConflictSetting], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ConflictSetting]?, _ error: Error?) -> Void)) -> RequestTask {
        return conflictsSettingsOrganizationIdPutWithRequestBuilder(organizationId: organizationId, primaryEventTypeId: primaryEventTypeId, conflictSetting: conflictSetting).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates conflict settings for org
     - PUT /conflicts/settings/{organizationId}
     - parameter organizationId: (path)  
     - parameter primaryEventTypeId: (query) Id of the primary event type 
     - parameter conflictSetting: (body)  
     - returns: RequestBuilder<[ConflictSetting]> 
     */
    open class func conflictsSettingsOrganizationIdPutWithRequestBuilder(organizationId: String, primaryEventTypeId: Int, conflictSetting: [ConflictSetting]) -> RequestBuilder<[ConflictSetting]> {
        var localVariablePath = "/conflicts/settings/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: conflictSetting)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "primaryEventTypeId": (wrappedValue: primaryEventTypeId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ConflictSetting]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a ApplicationEntity
     
     - parameter applicationEntity: (body) A new &#x60;ApplicationEntity&#x60; to be created. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createApplicationEntity(applicationEntity: ApplicationEntity, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApplicationEntity?, _ error: Error?) -> Void)) -> RequestTask {
        return createApplicationEntityWithRequestBuilder(applicationEntity: applicationEntity).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a ApplicationEntity
     - POST /applicationEntities
     - Creates a new instance of a `ApplicationEntity`.
     - parameter applicationEntity: (body) A new &#x60;ApplicationEntity&#x60; to be created. 
     - returns: RequestBuilder<ApplicationEntity> 
     */
    open class func createApplicationEntityWithRequestBuilder(applicationEntity: ApplicationEntity) -> RequestBuilder<ApplicationEntity> {
        let localVariablePath = "/applicationEntities"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applicationEntity)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationEntity>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a currencyTag
     
     - parameter currencyTag: (body) A new &#x60;currencyTag&#x60; to be created. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createCurrencyTag(currencyTag: CurrencyTag, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CurrencyTag?, _ error: Error?) -> Void)) -> RequestTask {
        return createCurrencyTagWithRequestBuilder(currencyTag: currencyTag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a currencyTag
     - POST /currencytags
     - Creates a new instance of a `currencyTag`.
     - parameter currencyTag: (body) A new &#x60;currencyTag&#x60; to be created. 
     - returns: RequestBuilder<CurrencyTag> 
     */
    open class func createCurrencyTagWithRequestBuilder(currencyTag: CurrencyTag) -> RequestBuilder<CurrencyTag> {
        let localVariablePath = "/currencytags"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: currencyTag)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CurrencyTag>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a Event
     
     - parameter eventBase: (body) A new &#x60;Event&#x60; to be created. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createEvent(eventBase: EventBase, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventBase?, _ error: Error?) -> Void)) -> RequestTask {
        return createEventWithRequestBuilder(eventBase: eventBase).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a Event
     - POST /events
     - Creates a new instance of a `Event`.
     - parameter eventBase: (body) A new &#x60;Event&#x60; to be created. 
     - returns: RequestBuilder<EventBase> 
     */
    open class func createEventWithRequestBuilder(eventBase: EventBase) -> RequestBuilder<EventBase> {
        let localVariablePath = "/events"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventBase)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventBase>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a EventGetError
     
     - parameter body: (body) Message of log that you wish to add (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createEventGetError(body: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventGetError?, _ error: Error?) -> Void)) -> RequestTask {
        return createEventGetErrorWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a EventGetError
     - POST /eventGetErrors
     - Creates a new instance of a `EventGetError`.
     - parameter body: (body) Message of log that you wish to add (optional)
     - returns: RequestBuilder<EventGetError> 
     */
    open class func createEventGetErrorWithRequestBuilder(body: String? = nil) -> RequestBuilder<EventGetError> {
        let localVariablePath = "/eventGetErrors"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventGetError>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a MissionEventType
     
     - parameter missionEventTypeList: (body) A new &#x60;MissionEventType&#x60; to be created. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createMissionEventType(missionEventTypeList: MissionEventTypeList, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return createMissionEventTypeWithRequestBuilder(missionEventTypeList: missionEventTypeList).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a MissionEventType
     - POST /pbl/missionEventTypes
     - Creates a new instance of a `MissionEventType`.
     - parameter missionEventTypeList: (body) A new &#x60;MissionEventType&#x60; to be created. 
     - returns: RequestBuilder<Void> 
     */
    open class func createMissionEventTypeWithRequestBuilder(missionEventTypeList: MissionEventTypeList) -> RequestBuilder<Void> {
        let localVariablePath = "/pbl/missionEventTypes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: missionEventTypeList)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a organization
     
     - parameter organization: (body) A new &#x60;organization&#x60; to be created. 
     - parameter parentId: (query) UUID of the Parent Organization (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createOrganization(organization: Organization, parentId: UUID? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return createOrganizationWithRequestBuilder(organization: organization, parentId: parentId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a organization
     - POST /organizations
     - Adds a new organization
     - parameter organization: (body) A new &#x60;organization&#x60; to be created. 
     - parameter parentId: (query) UUID of the Parent Organization (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createOrganizationWithRequestBuilder(organization: Organization, parentId: UUID? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/organizations"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: organization)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "parentId": (wrappedValue: parentId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create personnel
     
     - parameter person: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createPersonnel(person: Person, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Person?, _ error: Error?) -> Void)) -> RequestTask {
        return createPersonnelWithRequestBuilder(person: person).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create personnel
     - POST /personnel
     - Creates a new `Personnel` instance
     - parameter person: (body)  
     - returns: RequestBuilder<Person> 
     */
    open class func createPersonnelWithRequestBuilder(person: Person) -> RequestBuilder<Person> {
        let localVariablePath = "/personnel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: person)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Person>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete a ApplicationEntity
     
     - parameter applicationEntityId: (path) A unique identifier for a &#x60;ApplicationEntity&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteApplicationEntity(applicationEntityId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteApplicationEntityWithRequestBuilder(applicationEntityId: applicationEntityId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a ApplicationEntity
     - DELETE /applicationEntities/{applicationEntityId}
     - Deletes an existing `ApplicationEntity`.
     - parameter applicationEntityId: (path) A unique identifier for a &#x60;ApplicationEntity&#x60;. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteApplicationEntityWithRequestBuilder(applicationEntityId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/applicationEntities/{applicationEntityId}"
        let applicationEntityIdPreEscape = "\(APIHelper.mapValueToPathItem(applicationEntityId))"
        let applicationEntityIdPostEscape = applicationEntityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{applicationEntityId}", with: applicationEntityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete a currencyTag
     
     - parameter currencyTagId: (path) A unique identifier for a &#x60;currencyTag&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteCurrencyTag(currencyTagId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteCurrencyTagWithRequestBuilder(currencyTagId: currencyTagId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a currencyTag
     - DELETE /currencytags/{currencyTagId}
     - Deletes an existing `currencyTag`.
     - parameter currencyTagId: (path) A unique identifier for a &#x60;currencyTag&#x60;. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteCurrencyTagWithRequestBuilder(currencyTagId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/currencytags/{currencyTagId}"
        let currencyTagIdPreEscape = "\(APIHelper.mapValueToPathItem(currencyTagId))"
        let currencyTagIdPostEscape = currencyTagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currencyTagId}", with: currencyTagIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete a Event
     
     - parameter eventId: (path) A unique identifier for a &#x60;Event&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteEvent(eventId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteEventWithRequestBuilder(eventId: eventId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Event
     - DELETE /events/{eventId}
     - Deletes an existing `Event`.
     - parameter eventId: (path) A unique identifier for a &#x60;Event&#x60;. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteEventWithRequestBuilder(eventId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/events/{eventId}"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete a organization
     
     - parameter organizationId: (path) A unique identifier for a &#x60;organization&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteOrganization(organizationId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteOrganizationWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a organization
     - DELETE /organizations/{organizationId}
     - Deletes an existing `organization`.
     - parameter organizationId: (path) A unique identifier for a &#x60;organization&#x60;. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteOrganizationWithRequestBuilder(organizationId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/organizations/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete a Personnel
     
     - parameter personnelId: (path) A unique identifier for a &#x60;Personnel&#x60;. 
     - parameter organizationId: (query) The organization we are deleting a person from 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deletePersonnel(personnelId: UUID, organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deletePersonnelWithRequestBuilder(personnelId: personnelId, organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Personnel
     - DELETE /personnel/{personnelId}
     - Deletes an existing `Personnel`.
     - parameter personnelId: (path) A unique identifier for a &#x60;Personnel&#x60;. 
     - parameter organizationId: (query) The organization we are deleting a person from 
     - returns: RequestBuilder<Void> 
     */
    open class func deletePersonnelWithRequestBuilder(personnelId: UUID, organizationId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/personnel/{personnelId}"
        let personnelIdPreEscape = "\(APIHelper.mapValueToPathItem(personnelId))"
        let personnelIdPostEscape = personnelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personnelId}", with: personnelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventGetErrorsDelete(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return eventGetErrorsDeleteWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /eventGetErrors
     - returns: RequestBuilder<Void> 
     */
    open class func eventGetErrorsDeleteWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/eventGetErrors"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Cancel an EventRequest
     
     - parameter eventRequestId: (query) ID of &#x60;EventRequest&#x60; being cancelled 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventRequestsDelete(eventRequestId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return eventRequestsDeleteWithRequestBuilder(eventRequestId: eventRequestId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel an EventRequest
     - DELETE /eventRequests
     - Sets the status of a `EventRequest` to be cancelled.
     - parameter eventRequestId: (query) ID of &#x60;EventRequest&#x60; being cancelled 
     - returns: RequestBuilder<Void> 
     */
    open class func eventRequestsDeleteWithRequestBuilder(eventRequestId: UUID) -> RequestBuilder<Void> {
        let localVariablePath = "/eventRequests"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eventRequestId": (wrappedValue: eventRequestId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     reject event request by id
     
     - parameter eventRequestId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventRequestsEventRequestIdDelete(eventRequestId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventRequest?, _ error: Error?) -> Void)) -> RequestTask {
        return eventRequestsEventRequestIdDeleteWithRequestBuilder(eventRequestId: eventRequestId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     reject event request by id
     - DELETE /eventRequests/{eventRequestId}
     - parameter eventRequestId: (path)  
     - returns: RequestBuilder<EventRequest> 
     */
    open class func eventRequestsEventRequestIdDeleteWithRequestBuilder(eventRequestId: UUID) -> RequestBuilder<EventRequest> {
        var localVariablePath = "/eventRequests/{eventRequestId}"
        let eventRequestIdPreEscape = "\(APIHelper.mapValueToPathItem(eventRequestId))"
        let eventRequestIdPostEscape = eventRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventRequestId}", with: eventRequestIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventRequest>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Updates isViewed param for an EventRequest
     
     - parameter eventRequestIds: (path) List of event request ids to be updated to viewed 
     - parameter isViewed: (query) boolean to show if event request has been viewed 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventRequestsEventRequestIdsPut(eventRequestIds: [UUID], isViewed: Bool, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventRequestListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return eventRequestsEventRequestIdsPutWithRequestBuilder(eventRequestIds: eventRequestIds, isViewed: isViewed).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates isViewed param for an EventRequest
     - PUT /eventRequests/{eventRequestIds}
     - Changes isViewed to true for an event request
     - parameter eventRequestIds: (path) List of event request ids to be updated to viewed 
     - parameter isViewed: (query) boolean to show if event request has been viewed 
     - returns: RequestBuilder<EventRequestListResult> 
     */
    open class func eventRequestsEventRequestIdsPutWithRequestBuilder(eventRequestIds: [UUID], isViewed: Bool) -> RequestBuilder<EventRequestListResult> {
        var localVariablePath = "/eventRequests/{eventRequestIds}"
        let eventRequestIdsPreEscape = "\(APIHelper.mapValueToPathItem(eventRequestIds))"
        let eventRequestIdsPostEscape = eventRequestIdsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventRequestIds}", with: eventRequestIdsPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isViewed": (wrappedValue: isViewed.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventRequestListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List of event requests
     
     - parameter organizationId: (query) &#x60;EventRequest&#x60; related to this organization 
     - parameter personId: (query) &#x60;EventRequest&#x60; related to this person (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventRequestsGet(organizationId: UUID, personId: UUID? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventRequestListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return eventRequestsGetWithRequestBuilder(organizationId: organizationId, personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List of event requests
     - GET /eventRequests
     - Gets a list of `EventRequest` entities.
     - parameter organizationId: (query) &#x60;EventRequest&#x60; related to this organization 
     - parameter personId: (query) &#x60;EventRequest&#x60; related to this person (optional)
     - returns: RequestBuilder<EventRequestListResult> 
     */
    open class func eventRequestsGetWithRequestBuilder(organizationId: UUID, personId: UUID? = nil) -> RequestBuilder<EventRequestListResult> {
        let localVariablePath = "/eventRequests"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: true),
            "personId": (wrappedValue: personId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventRequestListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Reject all EventRequests for a Role Assignment
     
     - parameter roleAssignmentId: (query) ID of &#x60;RoleAssignment&#x60; to reject all &#x60;EventRequest&#x60;s associated 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventRequestsPatch(roleAssignmentId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return eventRequestsPatchWithRequestBuilder(roleAssignmentId: roleAssignmentId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reject all EventRequests for a Role Assignment
     - PATCH /eventRequests
     - Sets the status of a `EventRequest` to be rejected.
     - parameter roleAssignmentId: (query) ID of &#x60;RoleAssignment&#x60; to reject all &#x60;EventRequest&#x60;s associated 
     - returns: RequestBuilder<Void> 
     */
    open class func eventRequestsPatchWithRequestBuilder(roleAssignmentId: UUID) -> RequestBuilder<Void> {
        let localVariablePath = "/eventRequests"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "roleAssignmentId": (wrappedValue: roleAssignmentId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Adds an EventRequest to Puckboard
     
     - parameter eventRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventRequestsPost(eventRequest: EventRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventRequest?, _ error: Error?) -> Void)) -> RequestTask {
        return eventRequestsPostWithRequestBuilder(eventRequest: eventRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds an EventRequest to Puckboard
     - POST /eventRequests
     - Add a `EventRequest` entity.
     - parameter eventRequest: (body)  
     - returns: RequestBuilder<EventRequest> 
     */
    open class func eventRequestsPostWithRequestBuilder(eventRequest: EventRequest) -> RequestBuilder<EventRequest> {
        let localVariablePath = "/eventRequests"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventRequest>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Approves a EventRequest
     
     - parameter eventRequestId: (query) ID of &#x60;EventRequest&#x60; being approved 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventRequestsPut(eventRequestId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return eventRequestsPutWithRequestBuilder(eventRequestId: eventRequestId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Approves a EventRequest
     - PUT /eventRequests
     - Sets the status of a `EventRequest` to approved.
     - parameter eventRequestId: (query) ID of &#x60;EventRequest&#x60; being approved 
     - returns: RequestBuilder<Void> 
     */
    open class func eventRequestsPutWithRequestBuilder(eventRequestId: UUID) -> RequestBuilder<Void> {
        let localVariablePath = "/eventRequests"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eventRequestId": (wrappedValue: eventRequestId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete an EventType
     
     - parameter id: (query) Id of &#x60;Event Type&#x60; to be deleted 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventTypesDelete(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return eventTypesDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an EventType
     - DELETE /eventTypes
     - Deletes an `EventType` and all the surrounding permissions.
     - parameter id: (query) Id of &#x60;Event Type&#x60; to be deleted 
     - returns: RequestBuilder<Void> 
     */
    open class func eventTypesDeleteWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        let localVariablePath = "/eventTypes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     update ordering of events
     
     - parameter eventType: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventTypesGanttPut(eventType: [EventType]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventTypeListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return eventTypesGanttPutWithRequestBuilder(eventType: eventType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     update ordering of events
     - PUT /eventTypes/gantt
     - parameter eventType: (body)  (optional)
     - returns: RequestBuilder<EventTypeListResult> 
     */
    open class func eventTypesGanttPutWithRequestBuilder(eventType: [EventType]? = nil) -> RequestBuilder<EventTypeListResult> {
        let localVariablePath = "/eventTypes/gantt"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventType)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventTypeListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get all event types
     
     - parameter organizationId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventTypesGet(organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventTypeListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return eventTypesGetWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all event types
     - GET /eventTypes
     - Gets a list of all `EventType` entities.
     - parameter organizationId: (query)  
     - returns: RequestBuilder<EventTypeListResult> 
     */
    open class func eventTypesGetWithRequestBuilder(organizationId: UUID) -> RequestBuilder<EventTypeListResult> {
        let localVariablePath = "/eventTypes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventTypeListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create an EventType
     
     - parameter eventType: (body) A new &#x60;EventType&#x60; to be created. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventTypesPost(eventType: EventType, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventType?, _ error: Error?) -> Void)) -> RequestTask {
        return eventTypesPostWithRequestBuilder(eventType: eventType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an EventType
     - POST /eventTypes
     - Adds an `EventType` and all the surrounding permissions.
     - parameter eventType: (body) A new &#x60;EventType&#x60; to be created. 
     - returns: RequestBuilder<EventType> 
     */
    open class func eventTypesPostWithRequestBuilder(eventType: EventType) -> RequestBuilder<EventType> {
        let localVariablePath = "/eventTypes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventType)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventType>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update an EventType
     
     - parameter eventType: (body) A &#x60;EventType&#x60; to be updated. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventTypesPut(eventType: EventType, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventType?, _ error: Error?) -> Void)) -> RequestTask {
        return eventTypesPutWithRequestBuilder(eventType: eventType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an EventType
     - PUT /eventTypes
     - Updates an `EventType` and all the surrounding permissions.
     - parameter eventType: (body) A &#x60;EventType&#x60; to be updated. 
     - returns: RequestBuilder<EventType> 
     */
    open class func eventTypesPutWithRequestBuilder(eventType: EventType) -> RequestBuilder<EventType> {
        let localVariablePath = "/eventTypes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventType)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventType>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Duplicate an event for a given event ID
     
     - parameter eventId: (path) A unique identifier for a &#x60;Event&#x60;. 
     - parameter offsetHours: (query) number of hours offset (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsEventIdPost(eventId: UUID, offsetHours: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventBase?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsEventIdPostWithRequestBuilder(eventId: eventId, offsetHours: offsetHours).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Duplicate an event for a given event ID
     - POST /events/{eventId}
     - parameter eventId: (path) A unique identifier for a &#x60;Event&#x60;. 
     - parameter offsetHours: (query) number of hours offset (optional)
     - returns: RequestBuilder<EventBase> 
     */
    open class func eventsEventIdPostWithRequestBuilder(eventId: UUID, offsetHours: Int? = nil) -> RequestBuilder<EventBase> {
        var localVariablePath = "/events/{eventId}"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offsetHours": (wrappedValue: offsetHours?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventBase>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     export a schedule of events as a csv
     
     - parameter startTime: (query) Filter by event start time 
     - parameter endTime: (query) Filter by event end time 
     - parameter organizationId: (query) Get event by organizationId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsExportGet(startTime: Date, endTime: Date, organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Data?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsExportGetWithRequestBuilder(startTime: startTime, endTime: endTime, organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     export a schedule of events as a csv
     - GET /events/export
     - Gets a list of all `Event` entities in a csv
     - parameter startTime: (query) Filter by event start time 
     - parameter endTime: (query) Filter by event end time 
     - parameter organizationId: (query) Get event by organizationId 
     - returns: RequestBuilder<Data> 
     */
    open class func eventsExportGetWithRequestBuilder(startTime: Date, endTime: Date, organizationId: UUID) -> RequestBuilder<Data> {
        let localVariablePath = "/events/export"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startTime": (wrappedValue: startTime.encodeToJSON(), isExplode: true),
            "endTime": (wrappedValue: endTime.encodeToJSON(), isExplode: true),
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter date: (query) Schedule start date as ISO zulu (optional)
     - parameter duration: (query) Schedule duration in days (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func exportScheduleGet(date: Date? = nil, duration: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return exportScheduleGetWithRequestBuilder(date: date, duration: duration).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /exportSchedule
     - parameter date: (query) Schedule start date as ISO zulu (optional)
     - parameter duration: (query) Schedule duration in days (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func exportScheduleGetWithRequestBuilder(date: Date? = nil, duration: Int? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/exportSchedule"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "date": (wrappedValue: date?.encodeToJSON(), isExplode: true),
            "duration": (wrappedValue: duration?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All AICurrencyStatuses
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAICurrencyStatuses(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AICurrencyStatusResultList?, _ error: Error?) -> Void)) -> RequestTask {
        return getAICurrencyStatusesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All AICurrencyStatuses
     - GET /ai/individualCurrencyStatus
     - Gets a list of all `AICurrencyStatus` entities.
     - returns: RequestBuilder<AICurrencyStatusResultList> 
     */
    open class func getAICurrencyStatusesWithRequestBuilder() -> RequestBuilder<AICurrencyStatusResultList> {
        let localVariablePath = "/ai/individualCurrencyStatus"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AICurrencyStatusResultList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All AIUnitCurrencyStatuses
     
     - parameter organizationId: (path) Organization to fetch for 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAIUnitCurrencyStatuses(organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AICurrencyStatusResultList?, _ error: Error?) -> Void)) -> RequestTask {
        return getAIUnitCurrencyStatusesWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All AIUnitCurrencyStatuses
     - GET /ai/unitCurrencyStatuses/{organizationId}
     - Gets a list of all `AIUnitCurrencyStatus` entities.
     - parameter organizationId: (path) Organization to fetch for 
     - returns: RequestBuilder<AICurrencyStatusResultList> 
     */
    open class func getAIUnitCurrencyStatusesWithRequestBuilder(organizationId: UUID) -> RequestBuilder<AICurrencyStatusResultList> {
        var localVariablePath = "/ai/unitCurrencyStatuses/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AICurrencyStatusResultList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllMws(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MwsList?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllMwsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /remis/mws/all
     - returns: RequestBuilder<MwsList> 
     */
    open class func getAllMwsWithRequestBuilder() -> RequestBuilder<MwsList> {
        let localVariablePath = "/remis/mws/all"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MwsList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllRemisTails(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PblRemisTailList?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllRemisTailsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /remis/all
     - returns: RequestBuilder<PblRemisTailList> 
     */
    open class func getAllRemisTailsWithRequestBuilder() -> RequestBuilder<PblRemisTailList> {
        let localVariablePath = "/remis/all"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PblRemisTailList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllUnmappedMds(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MdsList?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllUnmappedMdsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /remis/mds/unmappedMds
     - returns: RequestBuilder<MdsList> 
     */
    open class func getAllUnmappedMdsWithRequestBuilder() -> RequestBuilder<MdsList> {
        let localVariablePath = "/remis/mds/unmappedMds"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MdsList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All ApplicationEntities
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getApplicationEntities(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApplicationEntityListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getApplicationEntitiesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All ApplicationEntities
     - GET /applicationEntities
     - Gets a list of all `ApplicationEntity` entities.
     - returns: RequestBuilder<ApplicationEntityListResult> 
     */
    open class func getApplicationEntitiesWithRequestBuilder() -> RequestBuilder<ApplicationEntityListResult> {
        let localVariablePath = "/applicationEntities"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationEntityListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a ApplicationEntity
     
     - parameter applicationEntityId: (path) A unique identifier for a &#x60;ApplicationEntity&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getApplicationEntity(applicationEntityId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApplicationEntity?, _ error: Error?) -> Void)) -> RequestTask {
        return getApplicationEntityWithRequestBuilder(applicationEntityId: applicationEntityId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a ApplicationEntity
     - GET /applicationEntities/{applicationEntityId}
     - Gets the details of a single instance of a `ApplicationEntity`.
     - parameter applicationEntityId: (path) A unique identifier for a &#x60;ApplicationEntity&#x60;. 
     - returns: RequestBuilder<ApplicationEntity> 
     */
    open class func getApplicationEntityWithRequestBuilder(applicationEntityId: UUID) -> RequestBuilder<ApplicationEntity> {
        var localVariablePath = "/applicationEntities/{applicationEntityId}"
        let applicationEntityIdPreEscape = "\(APIHelper.mapValueToPathItem(applicationEntityId))"
        let applicationEntityIdPostEscape = applicationEntityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{applicationEntityId}", with: applicationEntityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationEntity>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All Currencies
     
     - parameter organizationId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCurrencies(organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CurrencyResultList?, _ error: Error?) -> Void)) -> RequestTask {
        return getCurrenciesWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All Currencies
     - GET /currencies
     - Gets a list of all `Currency` entities.
     - parameter organizationId: (query)  
     - returns: RequestBuilder<CurrencyResultList> 
     */
    open class func getCurrenciesWithRequestBuilder(organizationId: UUID) -> RequestBuilder<CurrencyResultList> {
        let localVariablePath = "/currencies"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CurrencyResultList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a Currency
     
     - parameter currencyId: (path) A unique identifier for a &#x60;Currency&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCurrency(currencyId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Currency?, _ error: Error?) -> Void)) -> RequestTask {
        return getCurrencyWithRequestBuilder(currencyId: currencyId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a Currency
     - GET /currencies/{currencyId}
     - Gets the details of a single instance of a `Currency`.
     - parameter currencyId: (path) A unique identifier for a &#x60;Currency&#x60;. 
     - returns: RequestBuilder<Currency> 
     */
    open class func getCurrencyWithRequestBuilder(currencyId: UUID) -> RequestBuilder<Currency> {
        var localVariablePath = "/currencies/{currencyId}"
        let currencyIdPreEscape = "\(APIHelper.mapValueToPathItem(currencyId))"
        let currencyIdPostEscape = currencyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currencyId}", with: currencyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Currency>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a currencyTag
     
     - parameter currencyTagId: (path) A unique identifier for a &#x60;currencyTag&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCurrencyTag(currencyTagId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CurrencyTag?, _ error: Error?) -> Void)) -> RequestTask {
        return getCurrencyTagWithRequestBuilder(currencyTagId: currencyTagId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a currencyTag
     - GET /currencytags/{currencyTagId}
     - Gets the details of a single instance of a `currencyTag`.
     - parameter currencyTagId: (path) A unique identifier for a &#x60;currencyTag&#x60;. 
     - returns: RequestBuilder<CurrencyTag> 
     */
    open class func getCurrencyTagWithRequestBuilder(currencyTagId: UUID) -> RequestBuilder<CurrencyTag> {
        var localVariablePath = "/currencytags/{currencyTagId}"
        let currencyTagIdPreEscape = "\(APIHelper.mapValueToPathItem(currencyTagId))"
        let currencyTagIdPostEscape = currencyTagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currencyTagId}", with: currencyTagIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CurrencyTag>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All currencyTags
     
     - parameter organizationId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCurrencyTags(organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CurrencyTagResultList?, _ error: Error?) -> Void)) -> RequestTask {
        return getCurrencyTagsWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All currencyTags
     - GET /currencytags
     - Gets a list of all `currencyTag` entities.
     - parameter organizationId: (query)  
     - returns: RequestBuilder<CurrencyTagResultList> 
     */
    open class func getCurrencyTagsWithRequestBuilder(organizationId: UUID) -> RequestBuilder<CurrencyTagResultList> {
        let localVariablePath = "/currencytags"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CurrencyTagResultList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) Organization to fetch for 
     - parameter locationId: (query) Box location to fetch content for on the BigBoard 
     - parameter startTime: (query) IsoString of the bigboard 2 week start 
     - parameter endTime: (query) IsoString of the bigboard 2 week end 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCustomContentForBox(organizationId: UUID, locationId: BoxIdentifier, startTime: String, endTime: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomBoxContent?, _ error: Error?) -> Void)) -> RequestTask {
        return getCustomContentForBoxWithRequestBuilder(organizationId: organizationId, locationId: locationId, startTime: startTime, endTime: endTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /bigboard/{organizationId}
     - Gets the content of an org's custom content box on the BigBoard
     - parameter organizationId: (path) Organization to fetch for 
     - parameter locationId: (query) Box location to fetch content for on the BigBoard 
     - parameter startTime: (query) IsoString of the bigboard 2 week start 
     - parameter endTime: (query) IsoString of the bigboard 2 week end 
     - returns: RequestBuilder<CustomBoxContent> 
     */
    open class func getCustomContentForBoxWithRequestBuilder(organizationId: UUID, locationId: BoxIdentifier, startTime: String, endTime: String) -> RequestBuilder<CustomBoxContent> {
        var localVariablePath = "/bigboard/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "locationId": (wrappedValue: locationId.encodeToJSON(), isExplode: true),
            "startTime": (wrappedValue: startTime.encodeToJSON(), isExplode: true),
            "endTime": (wrappedValue: endTime.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomBoxContent>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a Event
     
     - parameter eventId: (path) A unique identifier for a &#x60;Event&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEvent(eventId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventBase?, _ error: Error?) -> Void)) -> RequestTask {
        return getEventWithRequestBuilder(eventId: eventId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a Event
     - GET /events/{eventId}
     - Gets the details of a single instance of a `Event`.
     - parameter eventId: (path) A unique identifier for a &#x60;Event&#x60;. 
     - returns: RequestBuilder<EventBase> 
     */
    open class func getEventWithRequestBuilder(eventId: UUID) -> RequestBuilder<EventBase> {
        var localVariablePath = "/events/{eventId}"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventBase>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All EventGetErrors
     
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEventGetErrors(startTime: Date? = nil, endTime: Date? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [EventGetError]?, _ error: Error?) -> Void)) -> RequestTask {
        return getEventGetErrorsWithRequestBuilder(startTime: startTime, endTime: endTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All EventGetErrors
     - GET /eventGetErrors
     - Gets a list of all `EventGetError` entities.
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - returns: RequestBuilder<[EventGetError]> 
     */
    open class func getEventGetErrorsWithRequestBuilder(startTime: Date? = nil, endTime: Date? = nil) -> RequestBuilder<[EventGetError]> {
        let localVariablePath = "/eventGetErrors"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startTime": (wrappedValue: startTime?.encodeToJSON(), isExplode: true),
            "endTime": (wrappedValue: endTime?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[EventGetError]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All Events
     
     - parameter startTime: (query) Filter by event start time 
     - parameter endTime: (query) Filter by event end time 
     - parameter organizationId: (query) Get event by organizationId 
     - parameter isCrewRainbow: (query) optional boolean denoting whether or not to fetch events by people in the given organization (optional)
     - parameter lastQueryTime: (query) only return events if there has been changes after the lastQueryTime (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEvents(startTime: Date, endTime: Date, organizationId: UUID, isCrewRainbow: Bool? = nil, lastQueryTime: Date? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventBaseListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getEventsWithRequestBuilder(startTime: startTime, endTime: endTime, organizationId: organizationId, isCrewRainbow: isCrewRainbow, lastQueryTime: lastQueryTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All Events
     - GET /events
     - Gets a list of all `Event` entities.
     - parameter startTime: (query) Filter by event start time 
     - parameter endTime: (query) Filter by event end time 
     - parameter organizationId: (query) Get event by organizationId 
     - parameter isCrewRainbow: (query) optional boolean denoting whether or not to fetch events by people in the given organization (optional)
     - parameter lastQueryTime: (query) only return events if there has been changes after the lastQueryTime (optional)
     - returns: RequestBuilder<EventBaseListResult?> 
     */
    open class func getEventsWithRequestBuilder(startTime: Date, endTime: Date, organizationId: UUID, isCrewRainbow: Bool? = nil, lastQueryTime: Date? = nil) -> RequestBuilder<EventBaseListResult?> {
        let localVariablePath = "/events"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startTime": (wrappedValue: startTime.encodeToJSON(), isExplode: true),
            "endTime": (wrappedValue: endTime.encodeToJSON(), isExplode: true),
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: true),
            "isCrewRainbow": (wrappedValue: isCrewRainbow?.encodeToJSON(), isExplode: true),
            "lastQueryTime": (wrappedValue: lastQueryTime?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventBaseListResult?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All Events for the BigBoard
     
     - parameter startTime: (query) Filter by event start time 
     - parameter endTime: (query) Filter by event end time 
     - parameter organizationId: (query) Get event by organizationId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEventsForBigBoard(startTime: Date, endTime: Date, organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventBaseListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getEventsForBigBoardWithRequestBuilder(startTime: startTime, endTime: endTime, organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All Events for the BigBoard
     - GET /events/big-board
     - parameter startTime: (query) Filter by event start time 
     - parameter endTime: (query) Filter by event end time 
     - parameter organizationId: (query) Get event by organizationId 
     - returns: RequestBuilder<EventBaseListResult> 
     */
    open class func getEventsForBigBoardWithRequestBuilder(startTime: Date, endTime: Date, organizationId: UUID) -> RequestBuilder<EventBaseListResult> {
        let localVariablePath = "/events/big-board"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startTime": (wrappedValue: startTime.encodeToJSON(), isExplode: true),
            "endTime": (wrappedValue: endTime.encodeToJSON(), isExplode: true),
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventBaseListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a Feature
     
     - parameter featureId: (path) A unique identifier for a &#x60;Feature&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getFeature(featureId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Feature?, _ error: Error?) -> Void)) -> RequestTask {
        return getFeatureWithRequestBuilder(featureId: featureId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a Feature
     - GET /features/{featureId}
     - Gets the details of a single instance of a `Feature`.
     - parameter featureId: (path) A unique identifier for a &#x60;Feature&#x60;. 
     - returns: RequestBuilder<Feature> 
     */
    open class func getFeatureWithRequestBuilder(featureId: UUID) -> RequestBuilder<Feature> {
        var localVariablePath = "/features/{featureId}"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Feature>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All Features
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getFeatures(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FeatureResultList?, _ error: Error?) -> Void)) -> RequestTask {
        return getFeaturesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All Features
     - GET /features
     - Gets a list of all `Feature` entities.
     - returns: RequestBuilder<FeatureResultList> 
     */
    open class func getFeaturesWithRequestBuilder() -> RequestBuilder<FeatureResultList> {
        let localVariablePath = "/features"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FeatureResultList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All Long Running events for BigBoard
     
     - parameter startTime: (query) Filter by event start time 
     - parameter currentTime: (query) The current day we are basing the big board calculations off of 
     - parameter organizationId: (query) Get event by organizationId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLongRunningEventsForBigBoard(startTime: Date, currentTime: Date, organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventBaseListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getLongRunningEventsForBigBoardWithRequestBuilder(startTime: startTime, currentTime: currentTime, organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All Long Running events for BigBoard
     - GET /events/big-board/long-running
     - parameter startTime: (query) Filter by event start time 
     - parameter currentTime: (query) The current day we are basing the big board calculations off of 
     - parameter organizationId: (query) Get event by organizationId 
     - returns: RequestBuilder<EventBaseListResult> 
     */
    open class func getLongRunningEventsForBigBoardWithRequestBuilder(startTime: Date, currentTime: Date, organizationId: UUID) -> RequestBuilder<EventBaseListResult> {
        let localVariablePath = "/events/big-board/long-running"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startTime": (wrappedValue: startTime.encodeToJSON(), isExplode: true),
            "currentTime": (wrappedValue: currentTime.encodeToJSON(), isExplode: true),
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventBaseListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get an MWS
     
     - parameter mws: (path) Code for a Major Weapons System (MWS) 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMWS(mws: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Mws?, _ error: Error?) -> Void)) -> RequestTask {
        return getMWSWithRequestBuilder(mws: mws).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an MWS
     - GET /remis/mws/{mws}
     - Gets the details of a single instance of an `MWS`.
     - parameter mws: (path) Code for a Major Weapons System (MWS) 
     - returns: RequestBuilder<Mws> 
     */
    open class func getMWSWithRequestBuilder(mws: String) -> RequestBuilder<Mws> {
        var localVariablePath = "/remis/mws/{mws}"
        let mwsPreEscape = "\(APIHelper.mapValueToPathItem(mws))"
        let mwsPostEscape = mwsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mws}", with: mwsPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Mws>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All MissionEventTypes
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMissionEventTypes(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MissionEventTypeList?, _ error: Error?) -> Void)) -> RequestTask {
        return getMissionEventTypesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All MissionEventTypes
     - GET /pbl/missionEventTypes
     - Gets a list of all `MissionEventType` entities.
     - returns: RequestBuilder<MissionEventTypeList> 
     */
    open class func getMissionEventTypesWithRequestBuilder() -> RequestBuilder<MissionEventTypeList> {
        let localVariablePath = "/pbl/missionEventTypes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MissionEventTypeList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMwsPerOrganization(organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MwsList?, _ error: Error?) -> Void)) -> RequestTask {
        return getMwsPerOrganizationWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /remis/mws/all/{organizationId}
     - parameter organizationId: (path)  
     - returns: RequestBuilder<MwsList> 
     */
    open class func getMwsPerOrganizationWithRequestBuilder(organizationId: UUID) -> RequestBuilder<MwsList> {
        var localVariablePath = "/remis/mws/all/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MwsList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get Events for a user
     
     - parameter personnelId: (path) A uuid of a user 
     - parameter count: (path) count of events returned 
     - parameter startTime: (query) Filter by event start time 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNextPersonnelEvents(personnelId: UUID, count: Int, startTime: Date, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventBaseListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getNextPersonnelEventsWithRequestBuilder(personnelId: personnelId, count: count, startTime: startTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Events for a user
     - GET /personnel/{personnelId}/events/{count}
     - Gets a list of all `Event` entities within given time and organization constraints
     - parameter personnelId: (path) A uuid of a user 
     - parameter count: (path) count of events returned 
     - parameter startTime: (query) Filter by event start time 
     - returns: RequestBuilder<EventBaseListResult> 
     */
    open class func getNextPersonnelEventsWithRequestBuilder(personnelId: UUID, count: Int, startTime: Date) -> RequestBuilder<EventBaseListResult> {
        var localVariablePath = "/personnel/{personnelId}/events/{count}"
        let personnelIdPreEscape = "\(APIHelper.mapValueToPathItem(personnelId))"
        let personnelIdPostEscape = personnelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personnelId}", with: personnelIdPostEscape, options: .literal, range: nil)
        let countPreEscape = "\(APIHelper.mapValueToPathItem(count))"
        let countPostEscape = countPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{count}", with: countPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startTime": (wrappedValue: startTime.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventBaseListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a organization
     
     - parameter organizationId: (path) A unique identifier for a &#x60;organization&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOrganization(organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Organization?, _ error: Error?) -> Void)) -> RequestTask {
        return getOrganizationWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a organization
     - GET /organizations/{organizationId}
     - Gets the details of a single instance of a `organization`.
     - parameter organizationId: (path) A unique identifier for a &#x60;organization&#x60;. 
     - returns: RequestBuilder<Organization> 
     */
    open class func getOrganizationWithRequestBuilder(organizationId: UUID) -> RequestBuilder<Organization> {
        var localVariablePath = "/organizations/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Organization>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a organization's child organizations
     
     - parameter organizationId: (path) A unique identifier for a &#x60;organization&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOrganizationChildren(organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationIdAndNameListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getOrganizationChildrenWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a organization's child organizations
     - GET /organizations/{organizationId}/children
     - Gets the children (if any) of a `organization`.
     - parameter organizationId: (path) A unique identifier for a &#x60;organization&#x60;. 
     - returns: RequestBuilder<OrganizationIdAndNameListResult> 
     */
    open class func getOrganizationChildrenWithRequestBuilder(organizationId: UUID) -> RequestBuilder<OrganizationIdAndNameListResult> {
        var localVariablePath = "/organizations/{organizationId}/children"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrganizationIdAndNameListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a organization's siblings
     
     - parameter organizationId: (path) A unique identifier for a &#x60;organization&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOrganizationSiblings(organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UUID]?, _ error: Error?) -> Void)) -> RequestTask {
        return getOrganizationSiblingsWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a organization's siblings
     - GET /organizations/{organizationId}/siblings
     - Gets the siblings of a `organization`.
     - parameter organizationId: (path) A unique identifier for a &#x60;organization&#x60;. 
     - returns: RequestBuilder<[UUID]> 
     */
    open class func getOrganizationSiblingsWithRequestBuilder(organizationId: UUID) -> RequestBuilder<[UUID]> {
        var localVariablePath = "/organizations/{organizationId}/siblings"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UUID]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All organizations
     
     - parameter isSchedulingUnit: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOrganizations(isSchedulingUnit: Bool, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getOrganizationsWithRequestBuilder(isSchedulingUnit: isSchedulingUnit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All organizations
     - GET /organizations
     - Gets a list of all `organization` entities.
     - parameter isSchedulingUnit: (query)  
     - returns: RequestBuilder<OrganizationListResult> 
     */
    open class func getOrganizationsWithRequestBuilder(isSchedulingUnit: Bool) -> RequestBuilder<OrganizationListResult> {
        let localVariablePath = "/organizations"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isSchedulingUnit": (wrappedValue: isSchedulingUnit.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrganizationListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All PblRemisUploadRecords
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPblRemisUploadRecords(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PblRemisUploadRecordListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getPblRemisUploadRecordsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All PblRemisUploadRecords
     - GET /remis/history
     - Gets a list of all `PblRemisUploadRecord` entities.
     - returns: RequestBuilder<PblRemisUploadRecordListResult> 
     */
    open class func getPblRemisUploadRecordsWithRequestBuilder() -> RequestBuilder<PblRemisUploadRecordListResult> {
        let localVariablePath = "/remis/history"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PblRemisUploadRecordListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a Personnel
     
     - parameter personnelId: (path) A unique identifier for a &#x60;Personnel&#x60;. 
     - parameter isActive: (query) Filters by persons active organizations (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPersonnel(personnelId: UUID, isActive: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Person?, _ error: Error?) -> Void)) -> RequestTask {
        return getPersonnelWithRequestBuilder(personnelId: personnelId, isActive: isActive).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a Personnel
     - GET /personnel/{personnelId}
     - Gets the details of a single instance of a `Personnel`.
     - parameter personnelId: (path) A unique identifier for a &#x60;Personnel&#x60;. 
     - parameter isActive: (query) Filters by persons active organizations (optional)
     - returns: RequestBuilder<Person> 
     */
    open class func getPersonnelWithRequestBuilder(personnelId: UUID, isActive: Bool? = nil) -> RequestBuilder<Person> {
        var localVariablePath = "/personnel/{personnelId}"
        let personnelIdPreEscape = "\(APIHelper.mapValueToPathItem(personnelId))"
        let personnelIdPostEscape = personnelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personnelId}", with: personnelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isActive": (wrappedValue: isActive?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Person>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get Events for a user
     
     - parameter personnelId: (path) A uuid of a user 
     - parameter endTime: (query) Filter by event end time 
     - parameter organizationId: (query) Get event by organizationId 
     - parameter startTime: (query) Filter by event start time 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPersonnelEvents(personnelId: UUID, endTime: Date, organizationId: UUID, startTime: Date, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventBaseListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getPersonnelEventsWithRequestBuilder(personnelId: personnelId, endTime: endTime, organizationId: organizationId, startTime: startTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Events for a user
     - GET /personnel/{personnelId}/events
     - Gets a list of all `Event` entities within given time and organization constraints
     - parameter personnelId: (path) A uuid of a user 
     - parameter endTime: (query) Filter by event end time 
     - parameter organizationId: (query) Get event by organizationId 
     - parameter startTime: (query) Filter by event start time 
     - returns: RequestBuilder<EventBaseListResult> 
     */
    open class func getPersonnelEventsWithRequestBuilder(personnelId: UUID, endTime: Date, organizationId: UUID, startTime: Date) -> RequestBuilder<EventBaseListResult> {
        var localVariablePath = "/personnel/{personnelId}/events"
        let personnelIdPreEscape = "\(APIHelper.mapValueToPathItem(personnelId))"
        let personnelIdPostEscape = personnelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personnelId}", with: personnelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "endTime": (wrappedValue: endTime.encodeToJSON(), isExplode: true),
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: true),
            "startTime": (wrappedValue: startTime.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventBaseListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All Personnel
     
     - parameter organizationId: (query) Organization from which to get people (optional)
     - parameter active: (query) whether or not to grab active people (optional)
     - parameter page: (query) Zero-based page index (0..N) (optional)
     - parameter size: (query) The size of the page to be returned (optional)
     - parameter sort: (query) Sorting criteria in the format: &lt;column&gt;,&lt;asc|desc&gt;. Default sort order is ascending on last name. (optional)
     - parameter startsWith: (query) Prefix of last name to filter on (valid for when fetching ALL personnel) (optional, default to "")
     - parameter dodId: (query) DoDID to filter off of (optional)
     - parameter primaryOrgName: (query) Primary Organization Name Contains (optional, default to "")
     - parameter branch: (query) Branch Name to filter off of (optional, default to "")
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPersonnels(organizationId: UUID? = nil, active: Bool? = nil, page: Int? = nil, size: Int? = nil, sort: [String]? = nil, startsWith: String? = nil, dodId: Int64? = nil, primaryOrgName: String? = nil, branch: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PersonListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getPersonnelsWithRequestBuilder(organizationId: organizationId, active: active, page: page, size: size, sort: sort, startsWith: startsWith, dodId: dodId, primaryOrgName: primaryOrgName, branch: branch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All Personnel
     - GET /personnel
     - Gets a list of all `Personnel` entities.
     - parameter organizationId: (query) Organization from which to get people (optional)
     - parameter active: (query) whether or not to grab active people (optional)
     - parameter page: (query) Zero-based page index (0..N) (optional)
     - parameter size: (query) The size of the page to be returned (optional)
     - parameter sort: (query) Sorting criteria in the format: &lt;column&gt;,&lt;asc|desc&gt;. Default sort order is ascending on last name. (optional)
     - parameter startsWith: (query) Prefix of last name to filter on (valid for when fetching ALL personnel) (optional, default to "")
     - parameter dodId: (query) DoDID to filter off of (optional)
     - parameter primaryOrgName: (query) Primary Organization Name Contains (optional, default to "")
     - parameter branch: (query) Branch Name to filter off of (optional, default to "")
     - returns: RequestBuilder<PersonListResult> 
     */
    open class func getPersonnelsWithRequestBuilder(organizationId: UUID? = nil, active: Bool? = nil, page: Int? = nil, size: Int? = nil, sort: [String]? = nil, startsWith: String? = nil, dodId: Int64? = nil, primaryOrgName: String? = nil, branch: String? = nil) -> RequestBuilder<PersonListResult> {
        let localVariablePath = "/personnel"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "organizationId": (wrappedValue: organizationId?.encodeToJSON(), isExplode: true),
            "active": (wrappedValue: active?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "startsWith": (wrappedValue: startsWith?.encodeToJSON(), isExplode: true),
            "dodId": (wrappedValue: dodId?.encodeToJSON(), isExplode: true),
            "primaryOrgName": (wrappedValue: primaryOrgName?.encodeToJSON(), isExplode: true),
            "branch": (wrappedValue: branch?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PersonListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List All Events in post-mission status for the given BigBoard
     
     - parameter currentTime: (query) The current timestamp we&#39;re using to do post mission calculations 
     - parameter organizationId: (query) Get event by organizationId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPostMissionEventsForBigBoard(currentTime: Date, organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventBaseListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getPostMissionEventsForBigBoardWithRequestBuilder(currentTime: currentTime, organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All Events in post-mission status for the given BigBoard
     - GET /events/big-board/post-missions
     - parameter currentTime: (query) The current timestamp we&#39;re using to do post mission calculations 
     - parameter organizationId: (query) Get event by organizationId 
     - returns: RequestBuilder<EventBaseListResult> 
     */
    open class func getPostMissionEventsForBigBoardWithRequestBuilder(currentTime: Date, organizationId: UUID) -> RequestBuilder<EventBaseListResult> {
        let localVariablePath = "/events/big-board/post-missions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "currentTime": (wrappedValue: currentTime.encodeToJSON(), isExplode: true),
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventBaseListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTimeCategories(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PblTimeCategoriesList?, _ error: Error?) -> Void)) -> RequestTask {
        return getTimeCategoriesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /pbl/tasks/timecategories
     - returns: RequestBuilder<PblTimeCategoriesList> 
     */
    open class func getTimeCategoriesWithRequestBuilder() -> RequestBuilder<PblTimeCategoriesList> {
        let localVariablePath = "/pbl/tasks/timecategories"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PblTimeCategoriesList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     returns true or false depending on the person having a last four
     
     - parameter personnelId: (path) A unique identifier for a &#x60;Personnel&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func hasLastFour(personnelId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?, _ error: Error?) -> Void)) -> RequestTask {
        return hasLastFourWithRequestBuilder(personnelId: personnelId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     returns true or false depending on the person having a last four
     - GET /personnel/{personnelId}/last4
     - parameter personnelId: (path) A unique identifier for a &#x60;Personnel&#x60;. 
     - returns: RequestBuilder<Bool> 
     */
    open class func hasLastFourWithRequestBuilder(personnelId: UUID) -> RequestBuilder<Bool> {
        var localVariablePath = "/personnel/{personnelId}/last4"
        let personnelIdPreEscape = "\(APIHelper.mapValueToPathItem(personnelId))"
        let personnelIdPostEscape = personnelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personnelId}", with: personnelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func jobRoleCompatibilityGet(organizationId: UUID? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: JobRoleCompatibilityListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return jobRoleCompatibilityGetWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /jobRole/compatibility
     - OK
     - parameter organizationId: (query)  (optional)
     - returns: RequestBuilder<JobRoleCompatibilityListResult> 
     */
    open class func jobRoleCompatibilityGetWithRequestBuilder(organizationId: UUID? = nil) -> RequestBuilder<JobRoleCompatibilityListResult> {
        let localVariablePath = "/jobRole/compatibility"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "organizationId": (wrappedValue: organizationId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JobRoleCompatibilityListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update job role compatibility for a given job role
     
     - parameter jobRoleId: (query)  
     - parameter requestBody: (body) List of job role ids that correspond to the given job role id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func jobRoleCompatibilityPut(jobRoleId: Int, requestBody: [Int], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: JobRoleCompatibilityListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return jobRoleCompatibilityPutWithRequestBuilder(jobRoleId: jobRoleId, requestBody: requestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update job role compatibility for a given job role
     - PUT /jobRole/compatibility
     - parameter jobRoleId: (query)  
     - parameter requestBody: (body) List of job role ids that correspond to the given job role id 
     - returns: RequestBuilder<JobRoleCompatibilityListResult> 
     */
    open class func jobRoleCompatibilityPutWithRequestBuilder(jobRoleId: Int, requestBody: [Int]) -> RequestBuilder<JobRoleCompatibilityListResult> {
        let localVariablePath = "/jobRole/compatibility"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "jobRoleId": (wrappedValue: jobRoleId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JobRoleCompatibilityListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get job roles for a specific organization
     
     - parameter organizationId: (query) Id of branch for which to get jobroles (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func jobRoleGet(organizationId: UUID? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: JobRoleListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return jobRoleGetWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get job roles for a specific organization
     - GET /jobRole
     - parameter organizationId: (query) Id of branch for which to get jobroles (optional)
     - returns: RequestBuilder<JobRoleListResult> 
     */
    open class func jobRoleGetWithRequestBuilder(organizationId: UUID? = nil) -> RequestBuilder<JobRoleListResult> {
        let localVariablePath = "/jobRole"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "organizationId": (wrappedValue: organizationId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JobRoleListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete job role for specific id
     
     - parameter jobRoleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func jobRoleJobRoleIdDelete(jobRoleId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return jobRoleJobRoleIdDeleteWithRequestBuilder(jobRoleId: jobRoleId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete job role for specific id
     - DELETE /jobRole/{jobRoleId}
     - Deletes existing job role if job role is not being used
     - parameter jobRoleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func jobRoleJobRoleIdDeleteWithRequestBuilder(jobRoleId: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/jobRole/{jobRoleId}"
        let jobRoleIdPreEscape = "\(APIHelper.mapValueToPathItem(jobRoleId))"
        let jobRoleIdPostEscape = jobRoleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobRoleId}", with: jobRoleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update job role
     
     - parameter jobRoleId: (path)  
     - parameter jobRole: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func jobRoleJobRoleIdPut(jobRoleId: Int, jobRole: JobRole, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: JobRole?, _ error: Error?) -> Void)) -> RequestTask {
        return jobRoleJobRoleIdPutWithRequestBuilder(jobRoleId: jobRoleId, jobRole: jobRole).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update job role
     - PUT /jobRole/{jobRoleId}
     - parameter jobRoleId: (path)  
     - parameter jobRole: (body)  
     - returns: RequestBuilder<JobRole> 
     */
    open class func jobRoleJobRoleIdPutWithRequestBuilder(jobRoleId: Int, jobRole: JobRole) -> RequestBuilder<JobRole> {
        var localVariablePath = "/jobRole/{jobRoleId}"
        let jobRoleIdPreEscape = "\(APIHelper.mapValueToPathItem(jobRoleId))"
        let jobRoleIdPostEscape = jobRoleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobRoleId}", with: jobRoleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jobRole)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JobRole>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter jobRole: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func jobRolePost(jobRole: JobRole, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: JobRole?, _ error: Error?) -> Void)) -> RequestTask {
        return jobRolePostWithRequestBuilder(jobRole: jobRole).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /jobRole
     - parameter jobRole: (body)  
     - returns: RequestBuilder<JobRole> 
     */
    open class func jobRolePostWithRequestBuilder(jobRole: JobRole) -> RequestBuilder<JobRole> {
        let localVariablePath = "/jobRole"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jobRole)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JobRole>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update Job Roles for a given organization
     
     - parameter organizationId: (path) Id of owning organiation 
     - parameter jobRole: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func jobRoleUpdateOrganizationIdPut(organizationId: UUID, jobRole: [JobRole], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: JobRoleListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return jobRoleUpdateOrganizationIdPutWithRequestBuilder(organizationId: organizationId, jobRole: jobRole).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Job Roles for a given organization
     - PUT /jobRole/update/{organizationId}
     - parameter organizationId: (path) Id of owning organiation 
     - parameter jobRole: (body)  
     - returns: RequestBuilder<JobRoleListResult> 
     */
    open class func jobRoleUpdateOrganizationIdPutWithRequestBuilder(organizationId: UUID, jobRole: [JobRole]) -> RequestBuilder<JobRoleListResult> {
        var localVariablePath = "/jobRole/update/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jobRole)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JobRoleListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Logs time when user dismisses new feature modal into person state
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func newFeatureDismissModalPost(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return newFeatureDismissModalPostWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Logs time when user dismisses new feature modal into person state
     - POST /newFeature/dismissModal
     - returns: RequestBuilder<Void> 
     */
    open class func newFeatureDismissModalPostWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/newFeature/dismissModal"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a list of new features
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func newFeatureGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NewFeatureListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return newFeatureGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of new features
     - GET /newFeature
     - returns: RequestBuilder<NewFeatureListResult> 
     */
    open class func newFeatureGetWithRequestBuilder() -> RequestBuilder<NewFeatureListResult> {
        let localVariablePath = "/newFeature"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NewFeatureListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     deletes a new feature for a given ID
     
     - parameter newFeatureId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func newFeatureNewFeatureIdDelete(newFeatureId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return newFeatureNewFeatureIdDeleteWithRequestBuilder(newFeatureId: newFeatureId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     deletes a new feature for a given ID
     - DELETE /newFeature/{newFeatureId}
     - parameter newFeatureId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func newFeatureNewFeatureIdDeleteWithRequestBuilder(newFeatureId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/newFeature/{newFeatureId}"
        let newFeatureIdPreEscape = "\(APIHelper.mapValueToPathItem(newFeatureId))"
        let newFeatureIdPostEscape = newFeatureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{newFeatureId}", with: newFeatureIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     update a new feature announcement
     
     - parameter newFeatureId: (path)  
     - parameter newFeature: (body) updated new feature 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func newFeatureNewFeatureIdPut(newFeatureId: UUID, newFeature: NewFeature, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NewFeature?, _ error: Error?) -> Void)) -> RequestTask {
        return newFeatureNewFeatureIdPutWithRequestBuilder(newFeatureId: newFeatureId, newFeature: newFeature).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     update a new feature announcement
     - PUT /newFeature/{newFeatureId}
     - parameter newFeatureId: (path)  
     - parameter newFeature: (body) updated new feature 
     - returns: RequestBuilder<NewFeature> 
     */
    open class func newFeatureNewFeatureIdPutWithRequestBuilder(newFeatureId: UUID, newFeature: NewFeature) -> RequestBuilder<NewFeature> {
        var localVariablePath = "/newFeature/{newFeatureId}"
        let newFeatureIdPreEscape = "\(APIHelper.mapValueToPathItem(newFeatureId))"
        let newFeatureIdPostEscape = newFeatureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{newFeatureId}", with: newFeatureIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: newFeature)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NewFeature>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a new feature
     
     - parameter newFeatureListResult: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func newFeaturePost(newFeatureListResult: NewFeatureListResult, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NewFeatureListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return newFeaturePostWithRequestBuilder(newFeatureListResult: newFeatureListResult).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new feature
     - POST /newFeature
     - parameter newFeatureListResult: (body)  
     - returns: RequestBuilder<NewFeatureListResult> 
     */
    open class func newFeaturePostWithRequestBuilder(newFeatureListResult: NewFeatureListResult) -> RequestBuilder<NewFeatureListResult> {
        let localVariablePath = "/newFeature"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: newFeatureListResult)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NewFeatureListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Removes association between a chat team and an organization
     
     - parameter organizationId: (path)  
     - parameter chatTeamId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func organizationsOrganizationIdChatTeamChatTeamIdDelete(organizationId: UUID, chatTeamId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return organizationsOrganizationIdChatTeamChatTeamIdDeleteWithRequestBuilder(organizationId: organizationId, chatTeamId: chatTeamId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Removes association between a chat team and an organization
     - DELETE /organizations/{organizationId}/chatTeam/{chatTeamId}
     - parameter organizationId: (path)  
     - parameter chatTeamId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func organizationsOrganizationIdChatTeamChatTeamIdDeleteWithRequestBuilder(organizationId: UUID, chatTeamId: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/organizations/{organizationId}/chatTeam/{chatTeamId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let chatTeamIdPreEscape = "\(APIHelper.mapValueToPathItem(chatTeamId))"
        let chatTeamIdPostEscape = chatTeamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatTeamId}", with: chatTeamIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List of chatTeams associated with an organization
     
     - parameter organizationId: (path) org id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func organizationsOrganizationIdChatTeamGet(organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ChatTeamResultList?, _ error: Error?) -> Void)) -> RequestTask {
        return organizationsOrganizationIdChatTeamGetWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List of chatTeams associated with an organization
     - GET /organizations/{organizationId}/chatTeam
     - parameter organizationId: (path) org id 
     - returns: RequestBuilder<ChatTeamResultList> 
     */
    open class func organizationsOrganizationIdChatTeamGetWithRequestBuilder(organizationId: UUID) -> RequestBuilder<ChatTeamResultList> {
        var localVariablePath = "/organizations/{organizationId}/chatTeam"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ChatTeamResultList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Initialize chat teams for an organization
     
     - parameter organizationId: (path) org id 
     - parameter chatTeam: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func organizationsOrganizationIdChatTeamPost(organizationId: UUID, chatTeam: ChatTeam, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return organizationsOrganizationIdChatTeamPostWithRequestBuilder(organizationId: organizationId, chatTeam: chatTeam).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Initialize chat teams for an organization
     - POST /organizations/{organizationId}/chatTeam
     - parameter organizationId: (path) org id 
     - parameter chatTeam: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func organizationsOrganizationIdChatTeamPostWithRequestBuilder(organizationId: UUID, chatTeam: ChatTeam) -> RequestBuilder<Void> {
        var localVariablePath = "/organizations/{organizationId}/chatTeam"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: chatTeam)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Download a Form 457.
     
     - parameter missionID: (path) A unique identifier for a Mission. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblForm457MissionIDDownloadGet(missionID: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Data?, _ error: Error?) -> Void)) -> RequestTask {
        return pblForm457MissionIDDownloadGetWithRequestBuilder(missionID: missionID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a Form 457.
     - GET /pbl/form457/{missionID}/download
     - parameter missionID: (path) A unique identifier for a Mission. 
     - returns: RequestBuilder<Data> 
     */
    open class func pblForm457MissionIDDownloadGetWithRequestBuilder(missionID: UUID) -> RequestBuilder<Data> {
        var localVariablePath = "/pbl/form457/{missionID}/download"
        let missionIDPreEscape = "\(APIHelper.mapValueToPathItem(missionID))"
        let missionIDPostEscape = missionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionID}", with: missionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Download a Form 651.
     
     - parameter missionID: (path) A unique identifier for a Mission. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblForm651MissionIDDownloadGet(missionID: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Data?, _ error: Error?) -> Void)) -> RequestTask {
        return pblForm651MissionIDDownloadGetWithRequestBuilder(missionID: missionID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a Form 651.
     - GET /pbl/form651/{missionID}/download
     - parameter missionID: (path) A unique identifier for a Mission. 
     - returns: RequestBuilder<Data> 
     */
    open class func pblForm651MissionIDDownloadGetWithRequestBuilder(missionID: UUID) -> RequestBuilder<Data> {
        var localVariablePath = "/pbl/form651/{missionID}/download"
        let missionIDPreEscape = "\(APIHelper.mapValueToPathItem(missionID))"
        let missionIDPostEscape = missionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionID}", with: missionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Download a Form 781.
     
     - parameter missionID: (path) A unique identifier for a Mission. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblForm781MissionIDDownloadGet(missionID: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Data?, _ error: Error?) -> Void)) -> RequestTask {
        return pblForm781MissionIDDownloadGetWithRequestBuilder(missionID: missionID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a Form 781.
     - GET /pbl/form781/{missionID}/download
     - parameter missionID: (path) A unique identifier for a Mission. 
     - returns: RequestBuilder<Data> 
     */
    open class func pblForm781MissionIDDownloadGetWithRequestBuilder(missionID: UUID) -> RequestBuilder<Data> {
        var localVariablePath = "/pbl/form781/{missionID}/download"
        let missionIDPreEscape = "\(APIHelper.mapValueToPathItem(missionID))"
        let missionIDPostEscape = missionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionID}", with: missionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Download a Form 791.
     
     - parameter missionID: (path) A unique identifier for a Mission. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblForm791MissionIDDownloadGet(missionID: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Data?, _ error: Error?) -> Void)) -> RequestTask {
        return pblForm791MissionIDDownloadGetWithRequestBuilder(missionID: missionID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a Form 791.
     - GET /pbl/form791/{missionID}/download
     - parameter missionID: (path) A unique identifier for a Mission. 
     - returns: RequestBuilder<Data> 
     */
    open class func pblForm791MissionIDDownloadGetWithRequestBuilder(missionID: UUID) -> RequestBuilder<Data> {
        var localVariablePath = "/pbl/form791/{missionID}/download"
        let missionIDPreEscape = "\(APIHelper.mapValueToPathItem(missionID))"
        let missionIDPostEscape = missionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionID}", with: missionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Download a Form 853.
     
     - parameter missionID: (path) A unique identifier for a Mission. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblForm853MissionIDDownloadGet(missionID: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Data?, _ error: Error?) -> Void)) -> RequestTask {
        return pblForm853MissionIDDownloadGetWithRequestBuilder(missionID: missionID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a Form 853.
     - GET /pbl/form853/{missionID}/download
     - parameter missionID: (path) A unique identifier for a Mission. 
     - returns: RequestBuilder<Data> 
     */
    open class func pblForm853MissionIDDownloadGetWithRequestBuilder(missionID: UUID) -> RequestBuilder<Data> {
        var localVariablePath = "/pbl/form853/{missionID}/download"
        let missionIDPreEscape = "\(APIHelper.mapValueToPathItem(missionID))"
        let missionIDPostEscape = missionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionID}", with: missionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Download a Form 97.
     
     - parameter missionID: (path) A unique identifier for a Mission. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblForm97MissionIDDownloadGet(missionID: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Data?, _ error: Error?) -> Void)) -> RequestTask {
        return pblForm97MissionIDDownloadGetWithRequestBuilder(missionID: missionID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a Form 97.
     - GET /pbl/form97/{missionID}/download
     - parameter missionID: (path) A unique identifier for a Mission. 
     - returns: RequestBuilder<Data> 
     */
    open class func pblForm97MissionIDDownloadGetWithRequestBuilder(missionID: UUID) -> RequestBuilder<Data> {
        var localVariablePath = "/pbl/form97/{missionID}/download"
        let missionIDPreEscape = "\(APIHelper.mapValueToPathItem(missionID))"
        let missionIDPostEscape = missionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionID}", with: missionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     downloads mission data printout for a given mission id
     
     - parameter missionID: (path) UUID for a mission 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionDataMissionIDDownloadGet(missionID: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Data?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionDataMissionIDDownloadGetWithRequestBuilder(missionID: missionID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     downloads mission data printout for a given mission id
     - GET /pbl/missionData/{missionID}/download
     - parameter missionID: (path) UUID for a mission 
     - returns: RequestBuilder<Data> 
     */
    open class func pblMissionDataMissionIDDownloadGetWithRequestBuilder(missionID: UUID) -> RequestBuilder<Data> {
        var localVariablePath = "/pbl/missionData/{missionID}/download"
        let missionIDPreEscape = "\(APIHelper.mapValueToPathItem(missionID))"
        let missionIDPostEscape = missionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionID}", with: missionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter role: (query)  
     - parameter missionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionMissionIdApprovePut(role: RoleEnum, missionId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionMissionIdApprovePutWithRequestBuilder(role: role, missionId: missionId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /pbl/mission/{missionId}/approve
     - parameter role: (query)  
     - parameter missionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func pblMissionMissionIdApprovePutWithRequestBuilder(role: RoleEnum, missionId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/pbl/mission/{missionId}/approve"
        let missionIdPreEscape = "\(APIHelper.mapValueToPathItem(missionId))"
        let missionIdPostEscape = missionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionId}", with: missionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Role": (wrappedValue: role.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     GETs arms statuses for all training records and beans uploaded for a mission
     
     - parameter missionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionMissionIdArmsStatusGet(missionId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ArmsStatusListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionMissionIdArmsStatusGetWithRequestBuilder(missionId: missionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GETs arms statuses for all training records and beans uploaded for a mission
     - GET /pbl/mission/{missionId}/armsStatus
     - parameter missionId: (path)  
     - returns: RequestBuilder<ArmsStatusListResult> 
     */
    open class func pblMissionMissionIdArmsStatusGetWithRequestBuilder(missionId: UUID) -> RequestBuilder<ArmsStatusListResult> {
        var localVariablePath = "/pbl/mission/{missionId}/armsStatus"
        let missionIdPreEscape = "\(APIHelper.mapValueToPathItem(missionId))"
        let missionIdPostEscape = missionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionId}", with: missionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ArmsStatusListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     deletes mission for given mission id
     
     - parameter missionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionMissionIdDelete(missionId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionMissionIdDeleteWithRequestBuilder(missionId: missionId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     deletes mission for given mission id
     - DELETE /pbl/mission/{missionId}
     - parameter missionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func pblMissionMissionIdDeleteWithRequestBuilder(missionId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/pbl/mission/{missionId}"
        let missionIdPreEscape = "\(APIHelper.mapValueToPathItem(missionId))"
        let missionIdPostEscape = missionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionId}", with: missionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     gets missions for a given pbs event id
     
     - parameter missionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionMissionIdGet(missionId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Mission?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionMissionIdGetWithRequestBuilder(missionId: missionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     gets missions for a given pbs event id
     - GET /pbl/mission/{missionId}
     - parameter missionId: (path)  
     - returns: RequestBuilder<Mission> 
     */
    open class func pblMissionMissionIdGetWithRequestBuilder(missionId: UUID) -> RequestBuilder<Mission> {
        var localVariablePath = "/pbl/mission/{missionId}"
        let missionIdPreEscape = "\(APIHelper.mapValueToPathItem(missionId))"
        let missionIdPostEscape = missionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionId}", with: missionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Mission>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a list of Sorties by UUID
     
     - parameter missionId: (path)  
     - parameter requestBody: (body) A new list of sorties to manually set as pushed to arms 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionMissionIdManualPushToArmsPost(missionId: UUID, requestBody: [UUID], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionMissionIdManualPushToArmsPostWithRequestBuilder(missionId: missionId, requestBody: requestBody).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a list of Sorties by UUID
     - POST /pbl/mission/{missionId}/manualPushToArms
     - Creates a new instance of a `SortieIDListResult`
     - parameter missionId: (path)  
     - parameter requestBody: (body) A new list of sorties to manually set as pushed to arms 
     - returns: RequestBuilder<Void> 
     */
    open class func pblMissionMissionIdManualPushToArmsPostWithRequestBuilder(missionId: UUID, requestBody: [UUID]) -> RequestBuilder<Void> {
        var localVariablePath = "/pbl/mission/{missionId}/manualPushToArms"
        let missionIdPreEscape = "\(APIHelper.mapValueToPathItem(missionId))"
        let missionIdPostEscape = missionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionId}", with: missionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a mission for a given PBS Event ID
     
     - parameter missionId: (path)  
     - parameter mission: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionMissionIdPost(missionId: UUID, mission: Mission, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Mission?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionMissionIdPostWithRequestBuilder(missionId: missionId, mission: mission).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a mission for a given PBS Event ID
     - POST /pbl/mission/{missionId}
     - parameter missionId: (path)  
     - parameter mission: (body)  
     - returns: RequestBuilder<Mission> 
     */
    open class func pblMissionMissionIdPostWithRequestBuilder(missionId: UUID, mission: Mission) -> RequestBuilder<Mission> {
        var localVariablePath = "/pbl/mission/{missionId}"
        let missionIdPreEscape = "\(APIHelper.mapValueToPathItem(missionId))"
        let missionIdPostEscape = missionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionId}", with: missionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mission)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Mission>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Initiate precheck of mission and sorties to arms
     
     - parameter missionId: (path)  
     - parameter requestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionMissionIdPrecheckPost(missionId: UUID, requestBody: [UUID], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionMissionIdPrecheckPostWithRequestBuilder(missionId: missionId, requestBody: requestBody).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Initiate precheck of mission and sorties to arms
     - POST /pbl/mission/{missionId}/precheck
     - precheck ARMS for potential issues
     - parameter missionId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func pblMissionMissionIdPrecheckPostWithRequestBuilder(missionId: UUID, requestBody: [UUID]) -> RequestBuilder<Void> {
        var localVariablePath = "/pbl/mission/{missionId}/precheck"
        let missionIdPreEscape = "\(APIHelper.mapValueToPathItem(missionId))"
        let missionIdPostEscape = missionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionId}", with: missionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Initiate push of mission and sorties to arms
     
     - parameter missionId: (path)  
     - parameter requestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionMissionIdPushPost(missionId: UUID, requestBody: [UUID], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionMissionIdPushPostWithRequestBuilder(missionId: missionId, requestBody: requestBody).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Initiate push of mission and sorties to arms
     - POST /pbl/mission/{missionId}/push
     - Pushes sorties associated to body of uuids to arms
     - parameter missionId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func pblMissionMissionIdPushPostWithRequestBuilder(missionId: UUID, requestBody: [UUID]) -> RequestBuilder<Void> {
        var localVariablePath = "/pbl/mission/{missionId}/push"
        let missionIdPreEscape = "\(APIHelper.mapValueToPathItem(missionId))"
        let missionIdPostEscape = missionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionId}", with: missionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     updates mission for a given missionId
     
     - parameter missionId: (path)  
     - parameter mission: (body)  
     - parameter isSARMRole: (query)  (optional)
     - parameter skipPblPersonSave: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionMissionIdPut(missionId: UUID, mission: Mission, isSARMRole: Bool? = nil, skipPblPersonSave: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Mission?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionMissionIdPutWithRequestBuilder(missionId: missionId, mission: mission, isSARMRole: isSARMRole, skipPblPersonSave: skipPblPersonSave).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     updates mission for a given missionId
     - PUT /pbl/mission/{missionId}
     - parameter missionId: (path)  
     - parameter mission: (body)  
     - parameter isSARMRole: (query)  (optional)
     - parameter skipPblPersonSave: (query)  (optional)
     - returns: RequestBuilder<Mission> 
     */
    open class func pblMissionMissionIdPutWithRequestBuilder(missionId: UUID, mission: Mission, isSARMRole: Bool? = nil, skipPblPersonSave: Bool? = nil) -> RequestBuilder<Mission> {
        var localVariablePath = "/pbl/mission/{missionId}"
        let missionIdPreEscape = "\(APIHelper.mapValueToPathItem(missionId))"
        let missionIdPostEscape = missionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionId}", with: missionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mission)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isSARMRole": (wrappedValue: isSARMRole?.encodeToJSON(), isExplode: false),
            "skipPblPersonSave": (wrappedValue: skipPblPersonSave?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Mission>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     gets all flags for a given mission
     
     - parameter missionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionMissionIdSortieFlagsGet(missionId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SortieFlagListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionMissionIdSortieFlagsGetWithRequestBuilder(missionId: missionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     gets all flags for a given mission
     - GET /pbl/mission/{missionId}/sortieFlags
     - parameter missionId: (path)  
     - returns: RequestBuilder<SortieFlagListResult> 
     */
    open class func pblMissionMissionIdSortieFlagsGetWithRequestBuilder(missionId: UUID) -> RequestBuilder<SortieFlagListResult> {
        var localVariablePath = "/pbl/mission/{missionId}/sortieFlags"
        let missionIdPreEscape = "\(APIHelper.mapValueToPathItem(missionId))"
        let missionIdPostEscape = missionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{missionId}", with: missionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SortieFlagListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets all missions for an organization
     
     - parameter organizationId: (path)  
     - parameter windowStart: (query) start of window to begin searching for sorties by (optional)
     - parameter isReadyForReview: (query) if true, returns only those missions that have isReadyForReview boolean set to true. else, returns all missions. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblMissionOrganizationOrganizationIdGet(organizationId: UUID, windowStart: Date? = nil, isReadyForReview: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MissionForm781ListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return pblMissionOrganizationOrganizationIdGetWithRequestBuilder(organizationId: organizationId, windowStart: windowStart, isReadyForReview: isReadyForReview).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets all missions for an organization
     - GET /pbl/mission/organization/{organizationId}
     - parameter organizationId: (path)  
     - parameter windowStart: (query) start of window to begin searching for sorties by (optional)
     - parameter isReadyForReview: (query) if true, returns only those missions that have isReadyForReview boolean set to true. else, returns all missions. (optional)
     - returns: RequestBuilder<MissionForm781ListResult> 
     */
    open class func pblMissionOrganizationOrganizationIdGetWithRequestBuilder(organizationId: UUID, windowStart: Date? = nil, isReadyForReview: Bool? = nil) -> RequestBuilder<MissionForm781ListResult> {
        var localVariablePath = "/pbl/mission/organization/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "windowStart": (wrappedValue: windowStart?.encodeToJSON(), isExplode: false),
            "isReadyForReview": (wrappedValue: isReadyForReview?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MissionForm781ListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (query)  
     - parameter firstName: (query) Search against the firstName field (optional)
     - parameter lastName: (query) Search against the lastName field (optional)
     - parameter lastFour: (query) Search against the lastFour field (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblPblpersonArmsSearchGet(organizationId: UUID, firstName: String? = nil, lastName: String? = nil, lastFour: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PBLPersonListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return pblPblpersonArmsSearchGetWithRequestBuilder(organizationId: organizationId, firstName: firstName, lastName: lastName, lastFour: lastFour).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /pbl/pblperson/armsSearch
     - parameter organizationId: (query)  
     - parameter firstName: (query) Search against the firstName field (optional)
     - parameter lastName: (query) Search against the lastName field (optional)
     - parameter lastFour: (query) Search against the lastFour field (optional)
     - returns: RequestBuilder<PBLPersonListResult> 
     */
    open class func pblPblpersonArmsSearchGetWithRequestBuilder(organizationId: UUID, firstName: String? = nil, lastName: String? = nil, lastFour: String? = nil) -> RequestBuilder<PBLPersonListResult> {
        let localVariablePath = "/pbl/pblperson/armsSearch"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "organizationId": (wrappedValue: organizationId.encodeToJSON(), isExplode: false),
            "firstName": (wrappedValue: firstName?.encodeToJSON(), isExplode: false),
            "lastName": (wrappedValue: lastName?.encodeToJSON(), isExplode: false),
            "lastFour": (wrappedValue: lastFour?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PBLPersonListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter personId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblPblpersonPersonIdGet(personId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PBLPerson?, _ error: Error?) -> Void)) -> RequestTask {
        return pblPblpersonPersonIdGetWithRequestBuilder(personId: personId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /pbl/pblperson/{personId}
     - parameter personId: (path)  
     - returns: RequestBuilder<PBLPerson> 
     */
    open class func pblPblpersonPersonIdGetWithRequestBuilder(personId: UUID) -> RequestBuilder<PBLPerson> {
        var localVariablePath = "/pbl/pblperson/{personId}"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PBLPerson>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter personId: (path)  
     - parameter pBLPerson: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblPblpersonPersonIdPut(personId: UUID, pBLPerson: PBLPerson, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return pblPblpersonPersonIdPutWithRequestBuilder(personId: personId, pBLPerson: pBLPerson).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /pbl/pblperson/{personId}
     - parameter personId: (path)  
     - parameter pBLPerson: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func pblPblpersonPersonIdPutWithRequestBuilder(personId: UUID, pBLPerson: PBLPerson) -> RequestBuilder<Void> {
        var localVariablePath = "/pbl/pblperson/{personId}"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pBLPerson)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     update notes
     
     - parameter role: (query) role for which to add notes 
     - parameter sortieFlagId: (path)  
     - parameter body: (body) comment to update (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblSortieFlagsSortieFlagIdNotesPut(role: RoleEnum, sortieFlagId: UUID, body: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return pblSortieFlagsSortieFlagIdNotesPutWithRequestBuilder(role: role, sortieFlagId: sortieFlagId, body: body).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     update notes
     - PUT /pbl/sortieFlags/{sortieFlagId}/notes
     - parameter role: (query) role for which to add notes 
     - parameter sortieFlagId: (path)  
     - parameter body: (body) comment to update (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func pblSortieFlagsSortieFlagIdNotesPutWithRequestBuilder(role: RoleEnum, sortieFlagId: UUID, body: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/pbl/sortieFlags/{sortieFlagId}/notes"
        let sortieFlagIdPreEscape = "\(APIHelper.mapValueToPathItem(sortieFlagId))"
        let sortieFlagIdPostEscape = sortieFlagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sortieFlagId}", with: sortieFlagIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "role": (wrappedValue: role.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path)  
     - parameter showAll: (query) if true, returns all training tasks, including non flight events. else, returns only tasks with flight event true. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblTasksOrganizationIdGet(organizationId: UUID, showAll: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrainingTasksList?, _ error: Error?) -> Void)) -> RequestTask {
        return pblTasksOrganizationIdGetWithRequestBuilder(organizationId: organizationId, showAll: showAll).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /pbl/tasks/{organizationId}
     - parameter organizationId: (path)  
     - parameter showAll: (query) if true, returns all training tasks, including non flight events. else, returns only tasks with flight event true. (optional, default to false)
     - returns: RequestBuilder<TrainingTasksList> 
     */
    open class func pblTasksOrganizationIdGetWithRequestBuilder(organizationId: UUID, showAll: Bool? = nil) -> RequestBuilder<TrainingTasksList> {
        var localVariablePath = "/pbl/tasks/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "showAll": (wrappedValue: showAll?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TrainingTasksList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path)  
     - parameter search: (query) Search against the Task ID and Task Name fields (optional)
     - parameter page: (query) Zero-based page index (0..N) (optional, default to 0)
     - parameter size: (query) The size of the page to be returned (optional, default to 20)
     - parameter sort: (query) Sorting criteria in the format: &lt;column&gt;,&lt;asc|desc&gt;. Default sort order is ascending on task ID. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblTasksOrganizationIdSearchGet(organizationId: UUID, search: String? = nil, page: Int? = nil, size: Int? = nil, sort: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PageableTrainingTasksList?, _ error: Error?) -> Void)) -> RequestTask {
        return pblTasksOrganizationIdSearchGetWithRequestBuilder(organizationId: organizationId, search: search, page: page, size: size, sort: sort).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /pbl/tasks/{organizationId}/search
     - parameter organizationId: (path)  
     - parameter search: (query) Search against the Task ID and Task Name fields (optional)
     - parameter page: (query) Zero-based page index (0..N) (optional, default to 0)
     - parameter size: (query) The size of the page to be returned (optional, default to 20)
     - parameter sort: (query) Sorting criteria in the format: &lt;column&gt;,&lt;asc|desc&gt;. Default sort order is ascending on task ID. (optional)
     - returns: RequestBuilder<PageableTrainingTasksList> 
     */
    open class func pblTasksOrganizationIdSearchGetWithRequestBuilder(organizationId: UUID, search: String? = nil, page: Int? = nil, size: Int? = nil, sort: [String]? = nil) -> RequestBuilder<PageableTrainingTasksList> {
        var localVariablePath = "/pbl/tasks/{organizationId}/search"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: false),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: false),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageableTrainingTasksList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblTasksSynchronizeOrganizationIdPost(organizationId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return pblTasksSynchronizeOrganizationIdPostWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /pbl/tasks/synchronize/{organizationId}
     - parameter organizationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func pblTasksSynchronizeOrganizationIdPostWithRequestBuilder(organizationId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/pbl/tasks/synchronize/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     updates training tasks for given organization id
     
     - parameter organizationId: (path)  
     - parameter pblTrainingTask: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func pblUpdateTrainingTasks(organizationId: UUID, pblTrainingTask: [PblTrainingTask], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrainingTasksList?, _ error: Error?) -> Void)) -> RequestTask {
        return pblUpdateTrainingTasksWithRequestBuilder(organizationId: organizationId, pblTrainingTask: pblTrainingTask).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     updates training tasks for given organization id
     - POST /pbl/tasks/{organizationId}/updateTasks
     - parameter organizationId: (path)  
     - parameter pblTrainingTask: (body)  
     - returns: RequestBuilder<TrainingTasksList> 
     */
    open class func pblUpdateTrainingTasksWithRequestBuilder(organizationId: UUID, pblTrainingTask: [PblTrainingTask]) -> RequestBuilder<TrainingTasksList> {
        var localVariablePath = "/pbl/tasks/{organizationId}/updateTasks"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pblTrainingTask)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TrainingTasksList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Checks to see if a DODID exists for user creation/edits
     
     - parameter personnelUUID: (query) Person&#39;s uuid (optional)
     - parameter body: (body) dodId to check (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func personnelDodidExistsPost(personnelUUID: UUID? = nil, body: Int64? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?, _ error: Error?) -> Void)) -> RequestTask {
        return personnelDodidExistsPostWithRequestBuilder(personnelUUID: personnelUUID, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Checks to see if a DODID exists for user creation/edits
     - POST /personnel/dodidExists
     - parameter personnelUUID: (query) Person&#39;s uuid (optional)
     - parameter body: (body) dodId to check (optional)
     - returns: RequestBuilder<Bool> 
     */
    open class func personnelDodidExistsPostWithRequestBuilder(personnelUUID: UUID? = nil, body: Int64? = nil) -> RequestBuilder<Bool> {
        let localVariablePath = "/personnel/dodidExists"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "personnelUUID": (wrappedValue: personnelUUID?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter personnelId: (path) A unique identifier for a &#x60;Personnel&#x60;. 
     - parameter lastFour: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func personnelPersonnelIdLast4Put(personnelId: UUID, lastFour: LastFour, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return personnelPersonnelIdLast4PutWithRequestBuilder(personnelId: personnelId, lastFour: lastFour).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /personnel/{personnelId}/last4
     - updates last4 with body
     - parameter personnelId: (path) A unique identifier for a &#x60;Personnel&#x60;. 
     - parameter lastFour: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func personnelPersonnelIdLast4PutWithRequestBuilder(personnelId: UUID, lastFour: LastFour) -> RequestBuilder<Void> {
        var localVariablePath = "/personnel/{personnelId}/last4"
        let personnelIdPreEscape = "\(APIHelper.mapValueToPathItem(personnelId))"
        let personnelIdPostEscape = personnelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personnelId}", with: personnelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lastFour)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Endpoint to upload REMIS excel
     
     - parameter file: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func remisUpload(file: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return remisUploadWithRequestBuilder(file: file).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Endpoint to upload REMIS excel
     - POST /remis/upload
     - Rebuild the REMIS data set in PB
     - parameter file: (form)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func remisUploadWithRequestBuilder(file: URL? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/remis/upload"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get all possiblities of Puckboard's roles
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func roleGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return roleGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all possiblities of Puckboard's roles
     - GET /role
     - returns: RequestBuilder<ListResult> 
     */
    open class func roleGetWithRequestBuilder() -> RequestBuilder<ListResult> {
        let localVariablePath = "/role"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     get roles based on DOD ID
     
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rolePost(body: Int64, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return rolePostWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     get roles based on DOD ID
     - POST /role
     - parameter body: (body)  
     - returns: RequestBuilder<ListResult> 
     */
    open class func rolePostWithRequestBuilder(body: Int64) -> RequestBuilder<ListResult> {
        let localVariablePath = "/role"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     update roles based on dodId
     
     - parameter body: (body) dodId of user to update 
     - parameter roles: (query) list of roles to update (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rolePut(body: Int64, roles: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return rolePutWithRequestBuilder(body: body, roles: roles).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     update roles based on dodId
     - PUT /role
     - parameter body: (body) dodId of user to update 
     - parameter roles: (query) list of roles to update (optional)
     - returns: RequestBuilder<ListResult> 
     */
    open class func rolePutWithRequestBuilder(body: Int64, roles: [String]? = nil) -> RequestBuilder<ListResult> {
        let localVariablePath = "/role"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "roles": (wrappedValue: roles?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter personnelIds: (query) UUIDs of personnel for which to find conflicts 
     - parameter eventBase: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetedConflictsCrewAvailabilityPost(personnelIds: [UUID], eventBase: EventBase, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PersistedConflictListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return targetedConflictsCrewAvailabilityPostWithRequestBuilder(personnelIds: personnelIds, eventBase: eventBase).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /targetedConflicts/crewAvailability
     - parameter personnelIds: (query) UUIDs of personnel for which to find conflicts 
     - parameter eventBase: (body)  
     - returns: RequestBuilder<PersistedConflictListResult> 
     */
    open class func targetedConflictsCrewAvailabilityPostWithRequestBuilder(personnelIds: [UUID], eventBase: EventBase) -> RequestBuilder<PersistedConflictListResult> {
        let localVariablePath = "/targetedConflicts/crewAvailability"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventBase)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "personnelIds": (wrappedValue: personnelIds.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PersistedConflictListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets all conflicts for organization
     
     - parameter organizationId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetedConflictsOrganizationIdGet(organizationId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PersistedConflictListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return targetedConflictsOrganizationIdGetWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets all conflicts for organization
     - GET /targetedConflicts/{organizationId}
     - parameter organizationId: (path)  
     - returns: RequestBuilder<PersistedConflictListResult> 
     */
    open class func targetedConflictsOrganizationIdGetWithRequestBuilder(organizationId: String) -> RequestBuilder<PersistedConflictListResult> {
        var localVariablePath = "/targetedConflicts/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PersistedConflictListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetedConflictsOrganizationIdPost(organizationId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PersistedConflictListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return targetedConflictsOrganizationIdPostWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /targetedConflicts/{organizationId}
     - parameter organizationId: (path)  
     - returns: RequestBuilder<PersistedConflictListResult> 
     */
    open class func targetedConflictsOrganizationIdPostWithRequestBuilder(organizationId: String) -> RequestBuilder<PersistedConflictListResult> {
        var localVariablePath = "/targetedConflicts/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PersistedConflictListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path)  
     - parameter id: (query)  
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetedConflictsOrganizationIdPut(organizationId: String, id: UUID, body: Bool, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PersistedConflict?, _ error: Error?) -> Void)) -> RequestTask {
        return targetedConflictsOrganizationIdPutWithRequestBuilder(organizationId: organizationId, id: id, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /targetedConflicts/{organizationId}
     - parameter organizationId: (path)  
     - parameter id: (query)  
     - parameter body: (body)  
     - returns: RequestBuilder<PersistedConflict> 
     */
    open class func targetedConflictsOrganizationIdPutWithRequestBuilder(organizationId: String, id: UUID, body: Bool) -> RequestBuilder<PersistedConflict> {
        var localVariablePath = "/targetedConflicts/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PersistedConflict>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update a ApplicationEntity
     
     - parameter applicationEntityId: (path) A unique identifier for a &#x60;ApplicationEntity&#x60;. 
     - parameter applicationEntity: (body) Updated &#x60;ApplicationEntity&#x60; information. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateApplicationEntity(applicationEntityId: UUID, applicationEntity: ApplicationEntity, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApplicationEntity?, _ error: Error?) -> Void)) -> RequestTask {
        return updateApplicationEntityWithRequestBuilder(applicationEntityId: applicationEntityId, applicationEntity: applicationEntity).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a ApplicationEntity
     - PUT /applicationEntities/{applicationEntityId}
     - Updates an existing `ApplicationEntity`.
     - parameter applicationEntityId: (path) A unique identifier for a &#x60;ApplicationEntity&#x60;. 
     - parameter applicationEntity: (body) Updated &#x60;ApplicationEntity&#x60; information. 
     - returns: RequestBuilder<ApplicationEntity> 
     */
    open class func updateApplicationEntityWithRequestBuilder(applicationEntityId: UUID, applicationEntity: ApplicationEntity) -> RequestBuilder<ApplicationEntity> {
        var localVariablePath = "/applicationEntities/{applicationEntityId}"
        let applicationEntityIdPreEscape = "\(APIHelper.mapValueToPathItem(applicationEntityId))"
        let applicationEntityIdPostEscape = applicationEntityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{applicationEntityId}", with: applicationEntityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applicationEntity)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationEntity>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Updates an array of currencies
     
     - parameter currencyResultList: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateCurrencies(currencyResultList: CurrencyResultList, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateCurrenciesWithRequestBuilder(currencyResultList: currencyResultList).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates an array of currencies
     - PUT /currencies
     - See summary
     - parameter currencyResultList: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateCurrenciesWithRequestBuilder(currencyResultList: CurrencyResultList) -> RequestBuilder<Void> {
        let localVariablePath = "/currencies"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: currencyResultList)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update a Currency
     
     - parameter currencyId: (path) A unique identifier for a &#x60;Currency&#x60;. 
     - parameter currency: (body) Updated &#x60;Currency&#x60; information. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateCurrency(currencyId: UUID, currency: Currency, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateCurrencyWithRequestBuilder(currencyId: currencyId, currency: currency).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a Currency
     - PUT /currencies/{currencyId}
     - Updates an existing `Currency`.
     - parameter currencyId: (path) A unique identifier for a &#x60;Currency&#x60;. 
     - parameter currency: (body) Updated &#x60;Currency&#x60; information. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateCurrencyWithRequestBuilder(currencyId: UUID, currency: Currency) -> RequestBuilder<Void> {
        var localVariablePath = "/currencies/{currencyId}"
        let currencyIdPreEscape = "\(APIHelper.mapValueToPathItem(currencyId))"
        let currencyIdPostEscape = currencyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currencyId}", with: currencyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: currency)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update a currencyTag
     
     - parameter currencyTagId: (path) A unique identifier for a &#x60;currencyTag&#x60;. 
     - parameter currencyTag: (body) Updated &#x60;currencyTag&#x60; information. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateCurrencyTag(currencyTagId: UUID, currencyTag: CurrencyTag, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CurrencyTag?, _ error: Error?) -> Void)) -> RequestTask {
        return updateCurrencyTagWithRequestBuilder(currencyTagId: currencyTagId, currencyTag: currencyTag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a currencyTag
     - PUT /currencytags/{currencyTagId}
     - Updates an existing `currencyTag`.
     - parameter currencyTagId: (path) A unique identifier for a &#x60;currencyTag&#x60;. 
     - parameter currencyTag: (body) Updated &#x60;currencyTag&#x60; information. 
     - returns: RequestBuilder<CurrencyTag> 
     */
    open class func updateCurrencyTagWithRequestBuilder(currencyTagId: UUID, currencyTag: CurrencyTag) -> RequestBuilder<CurrencyTag> {
        var localVariablePath = "/currencytags/{currencyTagId}"
        let currencyTagIdPreEscape = "\(APIHelper.mapValueToPathItem(currencyTagId))"
        let currencyTagIdPostEscape = currencyTagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currencyTagId}", with: currencyTagIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: currencyTag)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CurrencyTag>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update a Event
     
     - parameter eventId: (path) A unique identifier for a &#x60;Event&#x60;. 
     - parameter eventBase: (body) Updated &#x60;Event&#x60; information. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateEvent(eventId: UUID, eventBase: EventBase, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventBase?, _ error: Error?) -> Void)) -> RequestTask {
        return updateEventWithRequestBuilder(eventId: eventId, eventBase: eventBase).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a Event
     - PUT /events/{eventId}
     - Updates an existing `Event`.
     - parameter eventId: (path) A unique identifier for a &#x60;Event&#x60;. 
     - parameter eventBase: (body) Updated &#x60;Event&#x60; information. 
     - returns: RequestBuilder<EventBase> 
     */
    open class func updateEventWithRequestBuilder(eventId: UUID, eventBase: EventBase) -> RequestBuilder<EventBase> {
        var localVariablePath = "/events/{eventId}"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventBase)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventBase>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update a Feature
     
     - parameter featureId: (path) A unique identifier for a &#x60;Feature&#x60;. 
     - parameter feature: (body) Updated &#x60;Feature&#x60; information. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateFeature(featureId: UUID, feature: Feature, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateFeatureWithRequestBuilder(featureId: featureId, feature: feature).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a Feature
     - PUT /features/{featureId}
     - Updates an existing `Feature`.
     - parameter featureId: (path) A unique identifier for a &#x60;Feature&#x60;. 
     - parameter feature: (body) Updated &#x60;Feature&#x60; information. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateFeatureWithRequestBuilder(featureId: UUID, feature: Feature) -> RequestBuilder<Void> {
        var localVariablePath = "/features/{featureId}"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: feature)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update MWS information
     
     - parameter mws: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateMWS(mws: [Mws], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MwsList?, _ error: Error?) -> Void)) -> RequestTask {
        return updateMWSWithRequestBuilder(mws: mws).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update MWS information
     - PUT /remis/mws/updateMws
     - Create or update a list of `MWS` with their associated REMIS MDS code mappings.
     - parameter mws: (body)  
     - returns: RequestBuilder<MwsList> 
     */
    open class func updateMWSWithRequestBuilder(mws: [Mws]) -> RequestBuilder<MwsList> {
        let localVariablePath = "/remis/mws/updateMws"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mws)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MwsList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update Mws list
     
     - parameter organizationId: (path)  
     - parameter requestBody: (body) New PBL Mws list associate with the given organization. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateMWSPerOrganization(organizationId: UUID, requestBody: [String], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MwsList?, _ error: Error?) -> Void)) -> RequestTask {
        return updateMWSPerOrganizationWithRequestBuilder(organizationId: organizationId, requestBody: requestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Mws list
     - PUT /remis/mws/all/{organizationId}
     - Create or update a Mws list with it's associated organization.
     - parameter organizationId: (path)  
     - parameter requestBody: (body) New PBL Mws list associate with the given organization. 
     - returns: RequestBuilder<MwsList> 
     */
    open class func updateMWSPerOrganizationWithRequestBuilder(organizationId: UUID, requestBody: [String]) -> RequestBuilder<MwsList> {
        var localVariablePath = "/remis/mws/all/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MwsList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update a organization
     
     - parameter organizationId: (path) A unique identifier for a &#x60;organization&#x60;. 
     - parameter organization: (body) Updated &#x60;organization&#x60; information. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateOrganization(organizationId: String, organization: Organization, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateOrganizationWithRequestBuilder(organizationId: organizationId, organization: organization).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a organization
     - PUT /organizations/{organizationId}
     - Updates an existing `organization`.
     - parameter organizationId: (path) A unique identifier for a &#x60;organization&#x60;. 
     - parameter organization: (body) Updated &#x60;organization&#x60; information. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateOrganizationWithRequestBuilder(organizationId: String, organization: Organization) -> RequestBuilder<Void> {
        var localVariablePath = "/organizations/{organizationId}"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: organization)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update a Personnel
     
     - parameter personnelId: (path) A unique identifier for a &#x60;Personnel&#x60;. 
     - parameter person: (body) Update &#x60;Personnel&#x60; information. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updatePersonnel(personnelId: UUID, person: Person, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Person?, _ error: Error?) -> Void)) -> RequestTask {
        return updatePersonnelWithRequestBuilder(personnelId: personnelId, person: person).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a Personnel
     - PUT /personnel/{personnelId}
     - Updates an existing `Personnel`
     - parameter personnelId: (path) A unique identifier for a &#x60;Personnel&#x60;. 
     - parameter person: (body) Update &#x60;Personnel&#x60; information. 
     - returns: RequestBuilder<Person> 
     */
    open class func updatePersonnelWithRequestBuilder(personnelId: UUID, person: Person) -> RequestBuilder<Person> {
        var localVariablePath = "/personnel/{personnelId}"
        let personnelIdPreEscape = "\(APIHelper.mapValueToPathItem(personnelId))"
        let personnelIdPostEscape = personnelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personnelId}", with: personnelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: person)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Person>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a user
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) -> RequestTask {
        return userGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a user
     - GET /user
     - Interfaces with the authentication project to retrieve user attributes and permissions
     - returns: RequestBuilder<User> 
     */
    open class func userGetWithRequestBuilder() -> RequestBuilder<User> {
        let localVariablePath = "/user"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter username: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userMattermostGet(username: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MattermostChatUserListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return userMattermostGetWithRequestBuilder(username: username).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /user/mattermost
     - parameter username: (query)  
     - returns: RequestBuilder<MattermostChatUserListResult> 
     */
    open class func userMattermostGetWithRequestBuilder(username: String) -> RequestBuilder<MattermostChatUserListResult> {
        let localVariablePath = "/user/mattermost"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "username": (wrappedValue: username.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MattermostChatUserListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get new features for a person
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userNewFeaturesGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NewFeatureListResult?, _ error: Error?) -> Void)) -> RequestTask {
        return userNewFeaturesGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get new features for a person
     - GET /user/newFeatures
     - returns: RequestBuilder<NewFeatureListResult> 
     */
    open class func userNewFeaturesGetWithRequestBuilder() -> RequestBuilder<NewFeatureListResult> {
        let localVariablePath = "/user/newFeatures"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NewFeatureListResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userStateGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserState?, _ error: Error?) -> Void)) -> RequestTask {
        return userStateGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /user/state
     - returns: RequestBuilder<UserState> 
     */
    open class func userStateGetWithRequestBuilder() -> RequestBuilder<UserState> {
        let localVariablePath = "/user/state"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserState>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter userState: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userStatePut(userState: UserState, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return userStatePutWithRequestBuilder(userState: userState).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /user/state
     - parameter userState: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func userStatePutWithRequestBuilder(userState: UserState) -> RequestBuilder<Void> {
        let localVariablePath = "/user/state"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userState)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
